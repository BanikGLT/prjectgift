#!/usr/bin/env python3
"""
Telegram Gift Detector - FastAPI Web Interface
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º –ø–æ–¥–∞—Ä–∫–æ–≤
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from pathlib import Path

from fastapi import FastAPI, HTTPException, BackgroundTasks, Depends, status
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn

from config import config
from telegram_gift_detector import TelegramGiftDetector

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê FASTAPI
# =============================================================================

app = FastAPI(
    title="Telegram Gift Detector API",
    description="Professional API for managing Telegram Gift Detection",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
detector_instance: Optional[TelegramGiftDetector] = None
detector_task: Optional[asyncio.Task] = None
is_running = False

# =============================================================================
# PYDANTIC –ú–û–î–ï–õ–ò
# =============================================================================

class DetectorStatus(BaseModel):
    """–°—Ç–∞—Ç—É—Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    is_running: bool
    uptime: Optional[str] = None
    gifts_detected: int = 0
    responses_sent: int = 0
    errors: int = 0
    last_gift: Optional[Dict[str, Any]] = None

class ConfigUpdate(BaseModel):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    response_delay: Optional[float] = None
    max_retries: Optional[int] = None
    enable_pyrogram_detection: Optional[bool] = None
    enable_raw_api_detection: Optional[bool] = None
    enable_text_detection: Optional[bool] = None
    log_level: Optional[str] = None

class ApiResponse(BaseModel):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API"""
    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None

# =============================================================================
# API ENDPOINTS
# =============================================================================

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    html_content = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>üéÅ Telegram Gift Detector</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; }
            .header { text-align: center; margin-bottom: 30px; }
            .card { background: white; padding: 20px; margin: 20px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .status { padding: 10px; border-radius: 4px; margin: 10px 0; }
            .status.running { background: #d4edda; color: #155724; }
            .status.stopped { background: #f8d7da; color: #721c24; }
            .btn { padding: 10px 20px; margin: 5px; border: none; border-radius: 4px; cursor: pointer; }
            .btn-primary { background: #007bff; color: white; }
            .btn-success { background: #28a745; color: white; }
            .btn-danger { background: #dc3545; color: white; }
            .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; }
            .stat-card { text-align: center; padding: 20px; background: #e9ecef; border-radius: 8px; }
            .logs { background: #000; color: #00ff00; padding: 15px; border-radius: 4px; font-family: monospace; height: 300px; overflow-y: scroll; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üéÅ Telegram Gift Detector</h1>
                <p>Professional Edition - Backend Interface</p>
            </div>
            
            <div class="card">
                <h2>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h2>
                <div id="status" class="status">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                <div class="stats" id="stats"></div>
            </div>
            
            <div class="card">
                <h2>üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
                <button class="btn btn-success" onclick="startDetector()">‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å</button>
                <button class="btn btn-danger" onclick="stopDetector()">‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                <button class="btn btn-primary" onclick="restartDetector()">üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å</button>
                <button class="btn btn-primary" onclick="refreshStatus()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
            </div>
            
            <div class="card">
                <h2>üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∏</h2>
                <div id="gifts">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
            
            <div class="card">
                <h2>üìã –õ–æ–≥–∏</h2>
                <div class="logs" id="logs">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...</div>
            </div>
        </div>
        
        <script>
            // JavaScript –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
            async function apiCall(endpoint, method = 'GET', data = null) {
                try {
                    const options = { method };
                    if (data) {
                        options.headers = { 'Content-Type': 'application/json' };
                        options.body = JSON.stringify(data);
                    }
                    const response = await fetch(endpoint, options);
                    return await response.json();
                } catch (error) {
                    console.error('API Error:', error);
                    return { success: false, message: error.message };
                }
            }
            
            async function refreshStatus() {
                const status = await apiCall('/api/status');
                const statusDiv = document.getElementById('status');
                const statsDiv = document.getElementById('stats');
                
                if (status.data) {
                    const isRunning = status.data.is_running;
                    statusDiv.className = `status ${isRunning ? 'running' : 'stopped'}`;
                    statusDiv.textContent = isRunning ? 'üü¢ –î–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω' : 'üî¥ –î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
                    
                    statsDiv.innerHTML = `
                        <div class="stat-card">
                            <h3>${status.data.gifts_detected || 0}</h3>
                            <p>–ü–æ–¥–∞—Ä–∫–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</p>
                        </div>
                        <div class="stat-card">
                            <h3>${status.data.responses_sent || 0}</h3>
                            <p>–û—Ç–≤–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</p>
                        </div>
                        <div class="stat-card">
                            <h3>${status.data.errors || 0}</h3>
                            <p>–û—à–∏–±–æ–∫</p>
                        </div>
                        <div class="stat-card">
                            <h3>${status.data.uptime || 'N/A'}</h3>
                            <p>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</p>
                        </div>
                    `;
                }
            }
            
            async function startDetector() {
                const result = await apiCall('/api/start', 'POST');
                alert(result.message);
                if (result.success) refreshStatus();
            }
            
            async function stopDetector() {
                const result = await apiCall('/api/stop', 'POST');
                alert(result.message);
                if (result.success) refreshStatus();
            }
            
            async function restartDetector() {
                const result = await apiCall('/api/restart', 'POST');
                alert(result.message);
                if (result.success) refreshStatus();
            }
            
            // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            setInterval(() => {
                refreshStatus();
            }, 5000);
            
            // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            refreshStatus();
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.get("/api/status")
async def get_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    try:
        stats = {
            "is_running": is_running,
            "gifts_detected": 0,
            "responses_sent": 0, 
            "errors": 0,
            "uptime": None
        }
        
        if detector_instance and hasattr(detector_instance, 'stats'):
            stats.update(detector_instance.stats)
            
        return ApiResponse(
            success=True,
            message="–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω",
            data=stats
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/start")
async def start_detector(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä"""
    global detector_instance, detector_task, is_running
    
    if is_running:
        return ApiResponse(
            success=False,
            message="–î–µ—Ç–µ–∫—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        )
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        detector_instance = TelegramGiftDetector()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
        async def run_detector():
            global is_running
            try:
                is_running = True
                await detector_instance.start()
                # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
                await asyncio.Event().wait()
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {e}")
                is_running = False
            finally:
                if detector_instance:
                    await detector_instance.stop()
                is_running = False
        
        detector_task = asyncio.create_task(run_detector())
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        await asyncio.sleep(2)
        
        return ApiResponse(
            success=True,
            message="–î–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        )
        
    except Exception as e:
        is_running = False
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")

@app.post("/api/stop")
async def stop_detector():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä"""
    global detector_instance, detector_task, is_running
    
    if not is_running:
        return ApiResponse(
            success=False,
            message="–î–µ—Ç–µ–∫—Ç–æ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        )
    
    try:
        is_running = False
        
        if detector_task:
            detector_task.cancel()
            try:
                await detector_task
            except asyncio.CancelledError:
                pass
        
        if detector_instance:
            await detector_instance.stop()
            detector_instance = None
        
        detector_task = None
        
        return ApiResponse(
            success=True,
            message="–î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}")

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    }

# =============================================================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
# =============================================================================

if __name__ == "__main__":
    import os
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è FastAPI
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –æ–±–ª–∞—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º)
    port = int(os.environ.get("PORT", 8000))
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=port,
        reload=False,  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ—Ç–∫–ª—é—á–∞–µ–º reload
        access_log=True
    )