#!/usr/bin/env python3
"""
Telegram Gift Detector - FastAPI Web Interface
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º –ø–æ–¥–∞—Ä–∫–æ–≤
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from pathlib import Path

from fastapi import FastAPI, HTTPException, BackgroundTasks, Depends, status
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn

from config import config
from telegram_gift_detector import TelegramGiftDetector

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê FASTAPI
# =============================================================================

app = FastAPI(
    title="Telegram Gift Detector API",
    description="Professional API for managing Telegram Gift Detection",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
detector_instance: Optional[TelegramGiftDetector] = None
detector_task: Optional[asyncio.Task] = None
is_running = False

# =============================================================================
# PYDANTIC –ú–û–î–ï–õ–ò
# =============================================================================

class DetectorStatus(BaseModel):
    """–°—Ç–∞—Ç—É—Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    is_running: bool
    uptime: Optional[str] = None
    gifts_detected: int = 0
    responses_sent: int = 0
    errors: int = 0
    last_gift: Optional[Dict[str, Any]] = None

class ConfigUpdate(BaseModel):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    response_delay: Optional[float] = None
    max_retries: Optional[int] = None
    enable_pyrogram_detection: Optional[bool] = None
    enable_raw_api_detection: Optional[bool] = None
    enable_text_detection: Optional[bool] = None
    log_level: Optional[str] = None

class GiftInfo(BaseModel):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ"""
    message_id: int
    sender_id: Optional[int]
    sender_username: Optional[str]
    sender_name: str
    chat_id: int
    date: str
    gift_type: str
    gift_details: Dict[str, Any]

class ApiResponse(BaseModel):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API"""
    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None

# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

def get_detector_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    if not detector_instance:
        return {
            "is_running": False,
            "uptime": None,
            "gifts_detected": 0,
            "responses_sent": 0,
            "errors": 0
        }
    
    uptime = None
    if detector_instance.stats.get("start_time"):
        uptime_delta = datetime.now() - detector_instance.stats["start_time"]
        uptime = str(uptime_delta).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
    
    return {
        "is_running": is_running,
        "uptime": uptime,
        "gifts_detected": detector_instance.stats.get("gifts_detected", 0),
        "responses_sent": detector_instance.stats.get("responses_sent", 0),
        "errors": detector_instance.stats.get("errors", 0)
    }

def read_log_file(lines: int = 100) -> List[str]:
    """–ß–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥ —Ñ–∞–π–ª–∞"""
    try:
        log_path = Path(config.LOG_FILE)
        if not log_path.exists():
            return []
        
        with open(log_path, 'r', encoding='utf-8') as f:
            all_lines = f.readlines()
            return [line.strip() for line in all_lines[-lines:]]
    except Exception as e:
        return [f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}"]

def get_recent_gifts(limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∏ –∏–∑ –ª–æ–≥–æ–≤"""
    try:
        gifts = []
        log_lines = read_log_file(1000)  # –ß–∏—Ç–∞–µ–º –±–æ–ª—å—à–µ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
        
        for line in reversed(log_lines):
            if "–û–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ–¥–∞—Ä–æ–∫" in line:
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                try:
                    # –ü—Ä–∏–º–µ—Ä: "2024-01-15 10:30:00 - INFO - –û–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ–¥–∞—Ä–æ–∫ #1 –æ—Ç username"
                    parts = line.split(" - ")
                    if len(parts) >= 3:
                        timestamp = parts[0]
                        message = parts[2]
                        
                        gifts.append({
                            "timestamp": timestamp,
                            "message": message,
                            "raw_log": line
                        })
                        
                        if len(gifts) >= limit:
                            break
                except Exception:
                    continue
        
        return gifts
    except Exception as e:
        return [{"error": f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤: {str(e)}"}]

# =============================================================================
# API ENDPOINTS
# =============================================================================

@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    html_content = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>üéÅ Telegram Gift Detector</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; }
            .header { text-align: center; margin-bottom: 30px; }
            .card { background: white; padding: 20px; margin: 20px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .status { padding: 10px; border-radius: 4px; margin: 10px 0; }
            .status.running { background: #d4edda; color: #155724; }
            .status.stopped { background: #f8d7da; color: #721c24; }
            .btn { padding: 10px 20px; margin: 5px; border: none; border-radius: 4px; cursor: pointer; }
            .btn-primary { background: #007bff; color: white; }
            .btn-success { background: #28a745; color: white; }
            .btn-danger { background: #dc3545; color: white; }
            .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; }
            .stat-card { text-align: center; padding: 20px; background: #e9ecef; border-radius: 8px; }
            .logs { background: #000; color: #00ff00; padding: 15px; border-radius: 4px; font-family: monospace; height: 300px; overflow-y: scroll; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üéÅ Telegram Gift Detector</h1>
                <p>Professional Edition - Web Interface</p>
            </div>
            
            <div class="card">
                <h2>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h2>
                <div id="status" class="status">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                <div class="stats" id="stats"></div>
            </div>
            
            <div class="card">
                <h2>üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
                <button class="btn btn-success" onclick="startDetector()">‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å</button>
                <button class="btn btn-danger" onclick="stopDetector()">‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                <button class="btn btn-primary" onclick="restartDetector()">üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å</button>
                <button class="btn btn-primary" onclick="refreshStatus()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
            </div>
            
            <div class="card">
                <h2>üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∏</h2>
                <div id="gifts">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
            
            <div class="card">
                <h2>üìã –õ–æ–≥–∏</h2>
                <div class="logs" id="logs">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...</div>
            </div>
        </div>
        
        <script>
            async function apiCall(endpoint, method = 'GET', data = null) {
                try {
                    const options = { method };
                    if (data) {
                        options.headers = { 'Content-Type': 'application/json' };
                        options.body = JSON.stringify(data);
                    }
                    const response = await fetch(endpoint, options);
                    return await response.json();
                } catch (error) {
                    console.error('API Error:', error);
                    return { success: false, message: error.message };
                }
            }
            
            async function refreshStatus() {
                const status = await apiCall('/api/status');
                const statusDiv = document.getElementById('status');
                const statsDiv = document.getElementById('stats');
                
                if (status.data) {
                    const isRunning = status.data.is_running;
                    statusDiv.className = `status ${isRunning ? 'running' : 'stopped'}`;
                    statusDiv.textContent = isRunning ? 'üü¢ –î–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω' : 'üî¥ –î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
                    
                    statsDiv.innerHTML = `
                        <div class="stat-card">
                            <h3>${status.data.gifts_detected}</h3>
                            <p>–ü–æ–¥–∞—Ä–∫–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</p>
                        </div>
                        <div class="stat-card">
                            <h3>${status.data.responses_sent}</h3>
                            <p>–û—Ç–≤–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</p>
                        </div>
                        <div class="stat-card">
                            <h3>${status.data.errors}</h3>
                            <p>–û—à–∏–±–æ–∫</p>
                        </div>
                        <div class="stat-card">
                            <h3>${status.data.uptime || 'N/A'}</h3>
                            <p>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</p>
                        </div>
                    `;
                }
            }
            
            async function startDetector() {
                const result = await apiCall('/api/start', 'POST');
                alert(result.message);
                if (result.success) refreshStatus();
            }
            
            async function stopDetector() {
                const result = await apiCall('/api/stop', 'POST');
                alert(result.message);
                if (result.success) refreshStatus();
            }
            
            async function restartDetector() {
                const result = await apiCall('/api/restart', 'POST');
                alert(result.message);
                if (result.success) refreshStatus();
            }
            
            async function loadGifts() {
                const gifts = await apiCall('/api/gifts');
                const giftsDiv = document.getElementById('gifts');
                
                if (gifts.data && gifts.data.length > 0) {
                    giftsDiv.innerHTML = gifts.data.map(gift => 
                        `<div style="padding: 10px; border-bottom: 1px solid #eee;">
                            <strong>${gift.timestamp}</strong> - ${gift.message}
                        </div>`
                    ).join('');
                } else {
                    giftsDiv.innerHTML = '<p>–ü–æ–¥–∞—Ä–∫–∏ –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</p>';
                }
            }
            
            async function loadLogs() {
                const logs = await apiCall('/api/logs?lines=50');
                const logsDiv = document.getElementById('logs');
                
                if (logs.data) {
                    logsDiv.textContent = logs.data.join('\\n');
                    logsDiv.scrollTop = logsDiv.scrollHeight;
                }
            }
            
            // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            setInterval(() => {
                refreshStatus();
                loadGifts();
                loadLogs();
            }, 5000);
            
            // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            refreshStatus();
            loadGifts();
            loadLogs();
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.get("/api/status")
async def get_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    try:
        stats = get_detector_stats()
        return ApiResponse(
            success=True,
            message="–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω",
            data=stats
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/start")
async def start_detector(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä"""
    global detector_instance, detector_task, is_running
    
    if is_running:
        return ApiResponse(
            success=False,
            message="–î–µ—Ç–µ–∫—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        )
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        detector_instance = TelegramGiftDetector()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
        async def run_detector():
            global is_running
            try:
                is_running = True
                await detector_instance.start()
                # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
                await asyncio.Event().wait()
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {e}")
                is_running = False
            finally:
                if detector_instance:
                    await detector_instance.stop()
                is_running = False
        
        detector_task = asyncio.create_task(run_detector())
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        await asyncio.sleep(2)
        
        return ApiResponse(
            success=True,
            message="–î–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        )
        
    except Exception as e:
        is_running = False
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")

@app.post("/api/stop")
async def stop_detector():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä"""
    global detector_instance, detector_task, is_running
    
    if not is_running:
        return ApiResponse(
            success=False,
            message="–î–µ—Ç–µ–∫—Ç–æ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        )
    
    try:
        is_running = False
        
        if detector_task:
            detector_task.cancel()
            try:
                await detector_task
            except asyncio.CancelledError:
                pass
        
        if detector_instance:
            await detector_instance.stop()
            detector_instance = None
        
        detector_task = None
        
        return ApiResponse(
            success=True,
            message="–î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}")

@app.post("/api/restart")
async def restart_detector(background_tasks: BackgroundTasks):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä"""
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        await stop_detector()
        await asyncio.sleep(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        result = await start_detector(background_tasks)
        
        return ApiResponse(
            success=True,
            message="–î–µ—Ç–µ–∫—Ç–æ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {str(e)}")

@app.get("/api/logs")
async def get_logs(lines: int = 100):
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏"""
    try:
        log_lines = read_log_file(lines)
        return ApiResponse(
            success=True,
            message="–õ–æ–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã",
            data=log_lines
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/gifts")
async def get_gifts(limit: int = 10):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∏"""
    try:
        gifts = get_recent_gifts(limit)
        return ApiResponse(
            success=True,
            message="–ü–æ–¥–∞—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã",
            data=gifts
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/config")
async def get_config():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        config_data = {
            "response_delay": config.RESPONSE_DELAY,
            "max_retries": config.MAX_RETRIES,
            "cache_size": config.CACHE_SIZE,
            "log_level": config.LOG_LEVEL,
            "enable_pyrogram_detection": config.ENABLE_PYROGRAM_DETECTION,
            "enable_raw_api_detection": config.ENABLE_RAW_API_DETECTION,
            "enable_text_detection": config.ENABLE_TEXT_DETECTION,
        }
        
        return ApiResponse(
            success=True,
            message="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞",
            data=config_data
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/config")
async def update_config(config_update: ConfigUpdate):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        
        return ApiResponse(
            success=True,
            message="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)"
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    }

# =============================================================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
# =============================================================================

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è FastAPI
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        "api:app",
        host="0.0.0.0",
        port=8000,
        reload=False,  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ—Ç–∫–ª—é—á–∞–µ–º reload
        access_log=True
    )