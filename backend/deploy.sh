#!/bin/bash

# =============================================================================
# Telegram Gift Detector - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π —Å–∫—Ä–∏–ø—Ç
# =============================================================================

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE}üéÅ TELEGRAM GIFT DETECTOR DEPLOY${NC}"
    echo -e "${BLUE}========================================${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose: https://docs.docker.com/compose/install/"
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_config() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    if [ ! -f ".env" ]; then
        if [ -f ".env.example" ]; then
            print_warning "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –∏–∑ –ø—Ä–∏–º–µ—Ä–∞..."
            cp .env.example .env
            print_error "–í–ê–ñ–ù–û: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ API –¥–∞–Ω–Ω—ã–º–∏!"
            print_info "nano .env"
            exit 1
        else
            print_error "–§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            exit 1
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    source .env
    
    if [ "$API_ID" = "12345678" ] || [ "$API_HASH" = "your_api_hash_here" ]; then
        print_error "API –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ .env!"
        print_info "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
        exit 1
    fi
    
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p logs
    mkdir -p sessions
    mkdir -p data
    
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
build_image() {
    print_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    
    docker-compose build --no-cache
    
    print_success "Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω"
}

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
start_container() {
    print_info "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    docker-compose down 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    docker-compose up -d
    
    print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
    
    sleep 5
    
    if docker-compose ps | grep -q "Up"; then
        print_success "–î–µ—Ç–µ–∫—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
        print_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
        docker-compose logs --tail=20
        
        print_info "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:"
        echo "docker-compose logs -f"
        
    else
        print_error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!"
        print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:"
        docker-compose logs
        exit 1
    fi
}

# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
show_monitoring_info() {
    echo
    print_info "=== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ==="
    echo "üìä –°—Ç–∞—Ç—É—Å:           docker-compose ps"
    echo "üìã –õ–æ–≥–∏:             docker-compose logs -f"
    echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:       docker-compose restart"
    echo "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞:        docker-compose down"
    echo "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ:         docker-compose down -v --rmi all"
    echo
    print_info "=== –§–ê–ô–õ–´ –õ–û–ì–û–í ==="
    echo "üìÅ –õ–æ–≥–∏:             ./logs/gift_detector.log"
    echo "üíæ –°–µ—Å—Å–∏–∏:           ./sessions/"
    echo "üìä –î–∞–Ω–Ω—ã–µ:           docker volume ls"
    echo
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_dependencies
    check_config
    create_directories
    
    # –î–µ–ø–ª–æ–π
    build_image
    start_container
    check_status
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    show_monitoring_info
    
    print_success "üéâ –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!"
    print_info "–î–µ—Ç–µ–∫—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥–∞—Ä–∫–∏..."
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    "check")
        print_header
        check_dependencies
        check_config
        print_success "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!"
        ;;
    "build")
        print_header
        build_image
        ;;
    "start")
        print_header
        start_container
        check_status
        ;;
    "stop")
        print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
        docker-compose down
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        ;;
    "restart")
        print_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
        docker-compose restart
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
        ;;
    "logs")
        docker-compose logs -f
        ;;
    "status")
        docker-compose ps
        ;;
    "clean")
        print_warning "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö..."
        read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            docker-compose down -v --rmi all
            print_success "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã"
        fi
        ;;
    "help"|"-h"|"--help")
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
        echo
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  (–ø—É—Å—Ç–æ)   - –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π"
        echo "  check     - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        echo "  build     - –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞"
        echo "  start     - –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        echo "  stop      - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        echo "  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        echo "  logs      - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
        echo "  status    - –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        echo "  clean     - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"
        echo "  help      - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        ;;
    "")
        main
        ;;
    *)
        print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        print_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: $0 help"
        exit 1
        ;;
esac