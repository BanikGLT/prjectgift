"""
Telegram Gift Detector - Configuration File
–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
"""

import os
from typing import Optional

class Config:
    """–ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤"""
    
    # =============================================================================
    # –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò TELEGRAM API (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)
    # =============================================================================
    
    # –ü–æ–ª—É—á–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ https://my.telegram.org/apps
    API_ID: int = int(os.getenv('API_ID', 12345678))
    API_HASH: str = os.getenv('API_HASH', 'your_api_hash_here')
    PHONE_NUMBER: str = os.getenv('PHONE_NUMBER', '+1234567890')
    
    # =============================================================================
    # –ù–ê–°–¢–†–û–ô–ö–ò –°–ï–°–°–ò–ò
    # =============================================================================
    
    SESSION_NAME: str = os.getenv('SESSION_NAME', 'gift_detector_pro')
    
    # =============================================================================
    # –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
    # =============================================================================
    
    LOG_LEVEL: str = os.getenv('LOG_LEVEL', 'INFO')  # DEBUG, INFO, WARNING, ERROR, CRITICAL
    LOG_FILE: str = os.getenv('LOG_FILE', 'gift_detector.log')
    LOG_FORMAT: str = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    # =============================================================================
    # –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
    # =============================================================================
    
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Ñ–ª—É–¥–∞)
    RESPONSE_DELAY: float = float(os.getenv('RESPONSE_DELAY', 0.5))
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    MAX_RETRIES: int = int(os.getenv('MAX_RETRIES', 3))
    
    # –†–∞–∑–º–µ—Ä –∫—ç—à–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    CACHE_SIZE: int = int(os.getenv('CACHE_SIZE', 1000))
    
    # =============================================================================
    # –ù–ê–°–¢–†–û–ô–ö–ò –î–ï–¢–ï–ö–¶–ò–ò
    # =============================================================================
    
    # –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é —á–µ—Ä–µ–∑ Pyrogram service messages
    ENABLE_PYROGRAM_DETECTION: bool = os.getenv('ENABLE_PYROGRAM_DETECTION', 'true').lower() == 'true'
    
    # –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é —á–µ—Ä–µ–∑ Raw API (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
    ENABLE_RAW_API_DETECTION: bool = os.getenv('ENABLE_RAW_API_DETECTION', 'true').lower() == 'true'
    
    # –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –¥–µ—Ç–µ–∫—Ü–∏—é –ø–æ —Ç–µ–∫—Å—Ç—É
    ENABLE_TEXT_DETECTION: bool = os.getenv('ENABLE_TEXT_DETECTION', 'true').lower() == 'true'
    
    # =============================================================================
    # –ù–ê–°–¢–†–û–ô–ö–ò –û–¢–í–ï–¢–û–í
    # =============================================================================
    
    # –í–∫–ª—é—á–∏—Ç—å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç–∞—Ö
    USE_HTML_FORMATTING: bool = os.getenv('USE_HTML_FORMATTING', 'true').lower() == 'true'
    
    # –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
    DISABLE_WEB_PAGE_PREVIEW: bool = os.getenv('DISABLE_WEB_PAGE_PREVIEW', 'true').lower() == 'true'
    
    # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –æ—Ç–≤–µ—Ç–∞—Ö
    SHOW_STATS_IN_RESPONSE: bool = os.getenv('SHOW_STATS_IN_RESPONSE', 'true').lower() == 'true'
    
    # =============================================================================
    # –§–ò–õ–¨–¢–†–´ –ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø
    # =============================================================================
    
    # –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    IGNORED_USERS: list = [
        int(x.strip()) for x in os.getenv('IGNORED_USERS', '').split(',') 
        if x.strip().isdigit()
    ]
    
    # –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    IGNORED_CHATS: list = [
        int(x.strip()) for x in os.getenv('IGNORED_CHATS', '').split(',') 
        if x.strip().isdigit()
    ]
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å–µ–∫—É–Ω–¥—ã)
    MIN_RESPONSE_INTERVAL: int = int(os.getenv('MIN_RESPONSE_INTERVAL', 5))
    
    # =============================================================================
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
    # =============================================================================
    
    # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ JSON
    SAVE_GIFT_LOGS: bool = os.getenv('SAVE_GIFT_LOGS', 'false').lower() == 'true'
    
    # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤
    GIFT_LOGS_FILE: str = os.getenv('GIFT_LOGS_FILE', 'gifts_log.json')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥ (0 = –æ—Ç–∫–ª—é—á–µ–Ω–æ)
    STATS_INTERVAL: int = int(os.getenv('STATS_INTERVAL', 300))
    
    @classmethod
    def validate(cls) -> tuple[bool, list[str]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Returns:
            tuple: (is_valid, errors_list)
        """
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if cls.API_ID == 12345678:
            errors.append("‚ùå API_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if cls.API_HASH == 'your_api_hash_here':
            errors.append("‚ùå API_HASH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if cls.PHONE_NUMBER == '+1234567890':
            errors.append("‚ùå PHONE_NUMBER –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(cls.API_ID, int) or cls.API_ID <= 0:
            errors.append("‚ùå API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        if not isinstance(cls.API_HASH, str) or len(cls.API_HASH) < 10:
            errors.append("‚ùå API_HASH –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –¥–ª–∏–Ω–æ–π –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")
        
        if not isinstance(cls.PHONE_NUMBER, str) or not cls.PHONE_NUMBER.startswith('+'):
            errors.append("‚ùå PHONE_NUMBER –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '+'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π
        if not 0.1 <= cls.RESPONSE_DELAY <= 10:
            errors.append("‚ùå RESPONSE_DELAY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 10 —Å–µ–∫—É–Ω–¥")
        
        if not 1 <= cls.MAX_RETRIES <= 10:
            errors.append("‚ùå MAX_RETRIES –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
        
        if not 100 <= cls.CACHE_SIZE <= 10000:
            errors.append("‚ùå CACHE_SIZE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 10000")
        
        return len(errors) == 0, errors
    
    @classmethod
    def print_config(cls):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)"""
        print("=" * 60)
        print("üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø GIFT DETECTOR")
        print("=" * 60)
        print(f"üì± API ID: {cls.API_ID}")
        print(f"üîê API Hash: {'*' * len(cls.API_HASH)}")
        print(f"üìû Phone: {cls.PHONE_NUMBER[:3]}***{cls.PHONE_NUMBER[-4:]}")
        print(f"üíæ Session: {cls.SESSION_NAME}")
        print(f"üìä Log Level: {cls.LOG_LEVEL}")
        print(f"‚è±Ô∏è  Response Delay: {cls.RESPONSE_DELAY}s")
        print(f"üîÑ Max Retries: {cls.MAX_RETRIES}")
        print(f"üì¶ Cache Size: {cls.CACHE_SIZE}")
        print(f"üéØ Detections: Pyrogram={cls.ENABLE_PYROGRAM_DETECTION}, "
              f"Raw={cls.ENABLE_RAW_API_DETECTION}, Text={cls.ENABLE_TEXT_DETECTION}")
        print(f"üö´ Ignored Users: {len(cls.IGNORED_USERS)}")
        print(f"üö´ Ignored Chats: {len(cls.IGNORED_CHATS)}")
        print("=" * 60)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
is_valid, errors = config.validate()
if not is_valid:
    print("‚ùå –û–®–ò–ë–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
    for error in errors:
        print(f"  {error}")
    print("\nüìù –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!")
    print("üîó –ü–æ–ª—É—á–∏—Ç–µ API –¥–∞–Ω–Ω—ã–µ: https://my.telegram.org/apps")

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
API_ID = config.API_ID
API_HASH = config.API_HASH
PHONE_NUMBER = config.PHONE_NUMBER
SESSION_NAME = config.SESSION_NAME
LOG_LEVEL = config.LOG_LEVEL
RESPONSE_DELAY = config.RESPONSE_DELAY
MAX_RETRIES = config.MAX_RETRIES