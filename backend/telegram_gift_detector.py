#!/usr/bin/env python3
"""
Telegram Gift Detector - Professional Edition
–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö Telegram –ø–æ–¥–∞—Ä–∫–æ–≤ (Star Gifts)
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ –ø–æ–¥–∞—Ä–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
"""

import asyncio
import logging
import json
from datetime import datetime
from typing import Dict, Any, Optional

from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import RPCError, FloodWait, AuthKeyUnregistered, UserDeactivated
from pyrogram.raw import functions, types

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import config

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# =============================================================================

logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL.upper()),
    format=config.LOG_FORMAT,
    handlers=[
        logging.FileHandler(config.LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TelegramGiftDetector:
    """
    –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä Telegram –ø–æ–¥–∞—Ä–∫–æ–≤
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –ø–æ–¥–∞—Ä–∫–æ–≤: Star Gifts, Unique Gifts, Regular Gifts
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        self.client = Client(
            name=config.SESSION_NAME,
            api_id=config.API_ID,
            api_hash=config.API_HASH,
            phone_number=config.PHONE_NUMBER
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
        self.stats = {
            "gifts_detected": 0,
            "responses_sent": 0,
            "errors": 0,
            "start_time": datetime.now()
        }
        
        # –ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        self.processed_messages = set()
        
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        
        @self.client.on_message(filters.incoming)
        async def handle_incoming_message(client: Client, message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            await self.process_message(message)
    
    async def process_message(self, message: Message):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram
        """
        try:
            # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if message.id in self.processed_messages:
                return
            
            self.processed_messages.add(message.id)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            if len(self.processed_messages) > config.CACHE_SIZE:
                self.processed_messages.clear()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if self._should_ignore_message(message):
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–º
            if await self.is_gift_message(message):
                gift_info = await self.extract_gift_info(message)
                await self.send_gift_response(message, gift_info)
                
                self.stats["gifts_detected"] += 1
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ–¥–∞—Ä–æ–∫ #{self.stats['gifts_detected']} –æ—Ç {gift_info.get('sender_username', 'Unknown')}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ñ–ª—É–¥–∞
                await asyncio.sleep(config.RESPONSE_DELAY)
        
        except FloodWait as e:
            logger.warning(f"FloodWait: –æ–∂–∏–¥–∞–Ω–∏–µ {e.value} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.value)
        except Exception as e:
            self.stats["errors"] += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
    
    def _should_ignore_message(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        if message.from_user and message.from_user.id in config.IGNORED_USERS:
            logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            return True
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á–∞—Ç—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        if message.chat.id in config.IGNORED_CHATS:
            logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á–∞—Ç {message.chat.id}")
            return True
        
        return False
    
    async def is_gift_message(self, message: Message) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–º
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–∞—Ä–æ–∫
        """
        
        # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ service message —á–µ—Ä–µ–∑ Pyrogram
        if config.ENABLE_PYROGRAM_DETECTION and self._check_pyrogram_service(message):
            return True
        
        # –ú–µ—Ç–æ–¥ 2: –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Raw API (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
        if config.ENABLE_RAW_API_DETECTION and await self._check_raw_api(message):
            return True
        
        # –ú–µ—Ç–æ–¥ 3: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)
        if config.ENABLE_TEXT_DETECTION and self._check_text_indicators(message):
            return True
        
        return False
    
    def _check_pyrogram_service(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã Pyrogram"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º service message
            if hasattr(message, 'service') and message.service:
                service_str = str(message.service).lower()
                return 'gift' in service_str
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã (–µ—Å–ª–∏ –¥–æ–±–∞–≤—è—Ç –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö)
            gift_attributes = ['gift', 'star_gift', 'unique_gift']
            for attr in gift_attributes:
                if hasattr(message, attr) and getattr(message, attr):
                    return True
            
            return False
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Pyrogram service: {e}")
            return False
    
    async def _check_raw_api(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Raw API Telegram (–Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –º–µ—Ç–æ–¥)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º raw —Å–æ–æ–±—â–µ–Ω–∏–µ
            raw_messages = await self.client.invoke(
                functions.messages.GetMessages(
                    id=[types.InputMessageID(id=message.id)]
                )
            )
            
            if not raw_messages or not raw_messages.messages:
                return False
            
            raw_msg = raw_messages.messages[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º action –≤ service message
            if hasattr(raw_msg, 'action') and raw_msg.action:
                action_type = type(raw_msg.action).__name__.lower()
                
                # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤
                gift_actions = [
                    'messageactionstargift',
                    'messageactiongift', 
                    'messageactionuniquegift',
                    'messageactiongiftpremium'
                ]
                
                if any(gift_action in action_type for gift_action in gift_actions):
                    return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º media
            if hasattr(raw_msg, 'media') and raw_msg.media:
                media_type = type(raw_msg.media).__name__.lower()
                if 'gift' in media_type:
                    return True
            
            return False
        
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Raw API: {e}")
            return False
    
    def _check_text_indicators(self, message: Message) -> bool:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º"""
        if not message.text:
            return False
        
        text_lower = message.text.lower()
        
        # –¢–æ—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–¥–∞—Ä–∫–æ–≤
        gift_indicators = [
            "üéÅ",
            "sent you a gift",
            "–æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫", 
            "star gift",
            "unique gift"
        ]
        
        return any(indicator in text_lower for indicator in gift_indicators)
    
    async def extract_gift_info(self, message: Message) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–∞—Ä–∫–æ–º
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–∞—Ä–∫–µ
        """
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        gift_info = {
            "message_id": message.id,
            "sender_id": message.from_user.id if message.from_user else None,
            "sender_username": message.from_user.username if message.from_user else None,
            "sender_name": self._get_sender_name(message),
            "chat_id": message.chat.id,
            "chat_type": message.chat.type.value if message.chat.type else None,
            "date": message.date.isoformat() if message.date else None,
            "gift_type": "unknown",
            "gift_details": {}
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ Raw API
        try:
            await self._extract_raw_gift_details(message, gift_info)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–∞—Ä–∫–∞: {e}")
            gift_info["gift_type"] = "detected_basic"
        
        return gift_info
    
    def _get_sender_name(self, message: Message) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
        if not message.from_user:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
        
        name_parts = []
        if message.from_user.first_name:
            name_parts.append(message.from_user.first_name)
        if message.from_user.last_name:
            name_parts.append(message.from_user.last_name)
        
        return " ".join(name_parts) if name_parts else "–ë–µ–∑ –∏–º–µ–Ω–∏"
    
    async def _extract_raw_gift_details(self, message: Message, gift_info: Dict[str, Any]):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–∞—Ä–∫–∞ —á–µ—Ä–µ–∑ Raw API"""
        
        raw_messages = await self.client.invoke(
            functions.messages.GetMessages(
                id=[types.InputMessageID(id=message.id)]
            )
        )
        
        if not raw_messages or not raw_messages.messages:
            return
        
        raw_msg = raw_messages.messages[0]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º action
        if hasattr(raw_msg, 'action') and raw_msg.action:
            action = raw_msg.action
            gift_info["gift_type"] = type(action).__name__
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–¥–∞—Ä–∫–∞
            gift_obj = None
            if hasattr(action, 'gift'):
                gift_obj = action.gift
            elif hasattr(action, 'star_gift'):
                gift_obj = action.star_gift
            elif hasattr(action, 'unique_gift'):
                gift_obj = action.unique_gift
            
            if gift_obj:
                gift_info["gift_details"] = self._parse_gift_object(gift_obj)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º media (–µ—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –≤ media)
        elif hasattr(raw_msg, 'media') and raw_msg.media:
            media = raw_msg.media
            gift_info["gift_type"] = type(media).__name__
            
            if hasattr(media, 'gift'):
                gift_info["gift_details"] = self._parse_gift_object(media.gift)
    
    def _parse_gift_object(self, gift_obj) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏—Ç –æ–±—ä–µ–∫—Ç –ø–æ–¥–∞—Ä–∫–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        
        Args:
            gift_obj: –û–±—ä–µ–∫—Ç –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ Raw API
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –ø–æ–¥–∞—Ä–∫–∞
        """
        details = {}
        
        # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤
        possible_attrs = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            'id', 'stars', 'price', 'title', 'description',
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            'total_amount', 'remaining_amount', 'sold_amount',
            'availability_remains', 'availability_total',
            
            # –°—Ç–∞—Ç—É—Å—ã
            'is_limited', 'is_sold_out', 'is_unique', 'is_exclusive',
            'limited', 'sold_out', 'unique', 'exclusive',
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏–µ
            'convert_stars', 'upgrade_price', 'upgrade_stars',
            'conversion_rate', 'refund_amount',
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            'sticker', 'animation', 'pattern', 'backdrop',
            'model', 'symbol', 'first_sale_date', 'last_sale_date',
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            'currency', 'provider', 'gift_code', 'serial_number'
        ]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        for attr in possible_attrs:
            if hasattr(gift_obj, attr):
                value = getattr(gift_obj, attr)
                if value is not None:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏
                    if hasattr(value, '__dict__'):
                        details[attr] = str(value)
                    else:
                        details[attr] = value
        
        return details
    
    async def send_gift_response(self, original_message: Message, gift_info: Dict[str, Any]):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–∞—Ä–∫–µ
        
        Args:
            original_message: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–∞—Ä–∫–æ–º
            gift_info: –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ
        """
        
        response_text = self._format_gift_response(gift_info)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        for attempt in range(config.MAX_RETRIES):
            try:
                await self.client.send_message(
                    chat_id=original_message.chat.id,
                    text=response_text,
                    reply_to_message_id=original_message.id,
                    parse_mode="HTML" if config.USE_HTML_FORMATTING else None,
                    disable_web_page_preview=config.DISABLE_WEB_PAGE_PREVIEW
                )
                
                self.stats["responses_sent"] += 1
                logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                return
                
            except FloodWait as e:
                logger.warning(f"FloodWait –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e.value}s")
                await asyncio.sleep(e.value)
                
            except RPCError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < config.MAX_RETRIES - 1:
                    await asyncio.sleep(1)
                    
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                break
        
        self.stats["errors"] += 1
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
    
    def _format_gift_response(self, gift_info: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–∞—Ä–∫–µ
        
        Args:
            gift_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        
        lines = ["üéÅ <b>TELEGRAM GIFT DETECTED</b>\n"]
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        if gift_info.get('sender_username'):
            lines.append(f"üë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> @{gift_info['sender_username']}")
        
        lines.append(f"üìõ <b>–ò–º—è:</b> {gift_info.get('sender_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        lines.append(f"üÜî <b>User ID:</b> <code>{gift_info.get('sender_id', 'N/A')}</code>")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        lines.append(f"üì® <b>Message ID:</b> <code>{gift_info.get('message_id', 'N/A')}</code>")
        if gift_info.get('date'):
            lines.append(f"üïê <b>–í—Ä–µ–º—è:</b> {gift_info['date']}")
        
        # –¢–∏–ø –ø–æ–¥–∞—Ä–∫–∞
        lines.append(f"üéØ <b>–¢–∏–ø –ø–æ–¥–∞—Ä–∫–∞:</b> <code>{gift_info.get('gift_type', 'Unknown')}</code>")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ–¥–∞—Ä–∫–∞
        gift_details = gift_info.get('gift_details', {})
        if gift_details:
            lines.append("\nüîç <b>–î–ï–¢–ê–õ–ò –ü–û–î–ê–†–ö–ê:</b>")
            
            # ID –ø–æ–¥–∞—Ä–∫–∞
            if gift_details.get('id'):
                lines.append(f"üÜî <b>Gift ID:</b> <code>{gift_details['id']}</code>")
            
            # –¶–µ–Ω–∞
            if gift_details.get('stars'):
                lines.append(f"‚≠ê <b>–¶–µ–Ω–∞:</b> {gift_details['stars']} Telegram Stars")
            elif gift_details.get('price'):
                lines.append(f"üí∞ <b>–¶–µ–Ω–∞:</b> {gift_details['price']} ‚≠ê")
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            if gift_details.get('title'):
                lines.append(f"üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {gift_details['title']}")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if gift_details.get('total_amount'):
                lines.append(f"üì¶ <b>–í—Å–µ–≥–æ –≤—ã–ø—É—â–µ–Ω–æ:</b> {gift_details['total_amount']:,}")
            
            if gift_details.get('remaining_amount'):
                lines.append(f"üì¶ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {gift_details['remaining_amount']:,}")
            
            # –°—Ç–∞—Ç—É—Å—ã
            status_indicators = []
            if gift_details.get('is_limited') or gift_details.get('limited'):
                status_indicators.append("üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π")
            if gift_details.get('is_unique') or gift_details.get('unique'):
                status_indicators.append("üíé –£–Ω–∏–∫–∞–ª—å–Ω—ã–π")
            if gift_details.get('is_sold_out') or gift_details.get('sold_out'):
                status_indicators.append("‚ùå –†–∞—Å–ø—Ä–æ–¥–∞–Ω")
            if gift_details.get('is_exclusive') or gift_details.get('exclusive'):
                status_indicators.append("üëë –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π")
            
            if status_indicators:
                lines.append(f"üè∑ <b>–°—Ç–∞—Ç—É—Å:</b> {' ‚Ä¢ '.join(status_indicators)}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏–µ
            if gift_details.get('convert_stars'):
                lines.append(f"üí´ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:</b> {gift_details['convert_stars']} ‚≠ê")
            
            if gift_details.get('upgrade_price'):
                lines.append(f"‚¨ÜÔ∏è <b>–£–ª—É—á—à–µ–Ω–∏–µ:</b> {gift_details['upgrade_price']} ‚≠ê")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if gift_details.get('serial_number'):
                lines.append(f"üî¢ <b>–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {gift_details['serial_number']}")
        
        # –ü–æ–¥–ø–∏—Å—å
        lines.append(f"\nü§ñ <i>Professional Gift Detector v1.0</i>")
        if config.SHOW_STATS_IN_RESPONSE:
            lines.append(f"üìä <i>–ü–æ–¥–∞—Ä–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['gifts_detected']}</i>")
        
        return "\n".join(lines)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        try:
            await self.client.start()
            me = await self.client.get_me()
            
            logger.info("=" * 60)
            logger.info("üéÅ TELEGRAM GIFT DETECTOR - PROFESSIONAL EDITION")
            logger.info("=" * 60)
            logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: @{me.username} ({me.first_name})")
            logger.info(f"üÜî User ID: {me.id}")
            logger.info(f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {me.phone_number}")
            logger.info("üéØ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤...")
            logger.info("=" * 60)
            
        except AuthKeyUnregistered:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á —Å–µ—Å—Å–∏–∏")
            raise
        except UserDeactivated:
            logger.error("‚ùå –ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        try:
            await self.client.stop()
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            uptime = datetime.now() - self.stats["start_time"]
            logger.info("=" * 60)
            logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            logger.info(f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {self.stats['gifts_detected']}")
            logger.info(f"üí¨ –û—Ç–≤–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['responses_sent']}")
            logger.info(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")
            logger.info(f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}")
            logger.info("üõë Gift Detector –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            logger.info("=" * 60)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    is_valid, errors = config.validate()
    if not is_valid:
        print("‚ùå –û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò!")
        for error in errors:
            print(f"  {error}")
        print("üîó –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞: https://my.telegram.org/apps")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config.print_config()
    
    detector = TelegramGiftDetector()
    
    try:
        await detector.start()
        
        print("\nüöÄ Gift Detector –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üéÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("üìä –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ gift_detector.log")
        print("‚å®Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã
        await asyncio.Event().wait()
        
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        await detector.stop()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)