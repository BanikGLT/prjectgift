from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import logging
from datetime import datetime
import asyncio

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
detector_status = {
    "running": False,
    "status": "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
    "gifts_found": 0,
    "uptime": "0",
    "start_time": None,
    "history": []
}

auth_session = {
    "client": None,
    "config": None,
    "awaiting_sms": False,
    "awaiting_password": False
}

# gift_history —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è detector_status["gifts_history"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
async def start_gift_detector(client):
    """–†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑—É—á–µ–Ω–∏—è –†–ê–ë–û–ß–ï–ì–û –ø–∞—Ä—Å–µ—Ä–∞ vmilfe/gift-parser"""
    logger.info("üéÅ –ó–∞–ø—É—Å–∫ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ì–û –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ Star Gifts...")
    logger.info("üîç –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞–±–æ—á–µ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: https://github.com/vmilfe/gift-parser")
    
    # –ê–ö–¢–£–ê–õ–¨–ù–´–ï ID –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ (–∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞)
    RARE_GIFT_IDS = [ 
        5983471780763796287,  # –†–µ–¥–∫–∏–µ –ø–æ–¥–∞—Ä–∫–∏
        5936085638515261992,
        5933671725160989227,
        5936013938331222567,
        5913442287462908725,
        5915502858152706668,
        5915521180483191380,
        5913517067138499193,
        5882125812596999035,
        5882252952218894938,
        5857140566201991735,
        5846226946928673709,
        5845776576658015084,
        5841689550203650524,
        5841391256135008713,
        5839038009193792264,
        5837059369300132790
    ]
    
    # 1. –û–°–ù–û–í–ù–û–ô –º–µ—Ç–æ–¥: –î–µ—Ç–µ–∫—Ü–∏—è —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    @client.on_message()
    async def handle_message_for_gift_users(client, message):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            if hasattr(message, 'from_user') and message.from_user:
                user_id = message.from_user.id
                username = message.from_user.username or "N/A"
                
                logger.info(f"üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username} (ID: {user_id})")
                
                # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô API –ú–ï–¢–û–î!
                user_gifts = await get_user_gifts_properly(client, user_id, username)
                
                if user_gifts:
                    logger.info(f"üéÅ –ù–ê–ô–î–ï–ù–´ –ü–û–î–ê–†–ö–ò —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}!")
                    
                    gift_info = {
                        "type": "user_star_gifts",
                        "source": "get_user_gifts_api",
                        "details": {
                            "user_id": user_id,
                            "username": username,
                            "gifts_count": len(user_gifts),
                            "gifts": user_gifts,
                            "gift_type": "Real User Star Gifts"
                        }
                    }
                    
                    await process_found_gift(client, message, gift_info)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message_for_gift_users: {e}")
    
    async def get_user_gifts_properly(client, user_id: int, username: str):
        """–ü–†–ê–í–ò–õ–¨–ù–´–ô —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞)"""
        result = []
        try:
            logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏ —á–µ—Ä–µ–∑ client.get_user_gifts({user_id})...")
            
            # –≠–¢–û –ö–õ–Æ–ß–ï–í–û–ô –ú–ï–¢–û–î –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞!
            async for gift in client.get_user_gifts(user_id):
                logger.info(f"üéÅ –ù–∞–π–¥–µ–Ω –ø–æ–¥–∞—Ä–æ–∫: ID={gift.id}, limited={gift.is_limited}, upgraded={gift.is_upgraded}")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø–∞—Ä—Å–µ—Ä–µ
                if gift.is_limited == True and gift.is_upgraded == None and gift.id in RARE_GIFT_IDS:
                    logger.info(f"‚≠ê –†–ï–î–ö–ò–ô –ü–û–î–ê–†–û–ö! ID={gift.id}")
                    
                    result.append({
                        "gift_id": gift.id,
                        "user_id": user_id,
                        "username": username,
                        "is_limited": gift.is_limited,
                        "is_upgraded": gift.is_upgraded,
                        "stars": getattr(gift, 'stars', 'N/A'),
                        "model": getattr(gift, 'model', 'N/A'),
                        "backdrop": getattr(gift, 'backdrop', 'N/A'),
                        "symbol": getattr(gift, 'symbol', 'N/A')
                    })
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []
    
    async def process_found_gift(client, message, gift_info):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"üéâ –ü–û–î–ê–†–ö–ò –ù–ê–ô–î–ï–ù–´: {gift_info}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            if "gifts_history" not in detector_status:
                detector_status["gifts_history"] = []
            
            detector_status["gifts_history"].append({
                "gift_info": gift_info,
                "timestamp": datetime.now().isoformat(),
                "message_id": getattr(message, 'message_id', 'N/A'),
                "chat_id": getattr(message.chat, 'id', 'N/A') if hasattr(message, 'chat') else 'N/A'
            })
            
            detector_status["gifts_found"] = detector_status.get("gifts_found", 0) + len(gift_info['details']['gifts'])
            logger.info(f"üìä –í—Å–µ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {detector_status['gifts_found']}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
            await send_real_gift_response(client, message, gift_info)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ process_found_gift: {e}")
    
    async def send_real_gift_response(client, message, gift_info):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –æ –†–ï–ê–õ–¨–ù–´–• –ø–æ–¥–∞—Ä–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            details = gift_info['details']
            gifts = details['gifts']
            
            response_text = f"""üåü <b>–û–ë–ù–ê–†–£–ñ–ï–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –° –†–ï–î–ö–ò–ú–ò –ü–û–î–ê–†–ö–ê–ú–ò!</b>
            
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{details['username']} (ID: {details['user_id']})
üéÅ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–¥–∫–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤:</b> {details['gifts_count']}

üìã <b>–°–ü–ò–°–û–ö –ü–û–î–ê–†–ö–û–í:</b>
"""
            
            for i, gift in enumerate(gifts, 1):
                response_text += f"""
{i}. üéÅ <b>Gift ID:</b> {gift['gift_id']}
   ‚≠ê <b>–ó–≤–µ–∑–¥—ã:</b> {gift['stars']}
   üè† <b>–ú–æ–¥–µ–ª—å:</b> {gift['model']}
   üñºÔ∏è <b>–§–æ–Ω:</b> {gift['backdrop']}
   üî£ <b>–°–∏–º–≤–æ–ª:</b> {gift['symbol']}
"""
            
            response_text += f"""
‚è∞ <b>–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:</b> {datetime.now().strftime('%H:%M:%S')}
üîç <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ

üåü <b>–†–ï–î–ö–ò–ï –ü–û–î–ê–†–ö–ò –ù–ê–ô–î–ï–ù–´!</b> üåü"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–° –∏–ª–∏ –≤ —á–∞—Ç
            if message.from_user:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ (–≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞) –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    me = await client.get_me()
                    await client.send_message(
                        chat_id=me.id,
                        text=response_text,
                        parse_mode="HTML"
                    )
                    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ –≤ –õ–°")
                except Exception as dm_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°: {dm_error}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ –ø–æ–¥–∞—Ä–∫–∞—Ö: {e}")
    
    logger.info("‚úÖ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –¥–µ—Ç–µ–∫—Ç–æ—Ä Star Gifts –∑–∞–ø—É—â–µ–Ω!")
    logger.info("üéØ –¢–µ–ø–µ—Ä—å –¥–µ—Ç–µ–∫—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–´–ô API: client.get_user_gifts()")
    logger.info("üîç –ë—É–¥–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–¥–∫–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤!")

async def check_for_gifts(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ STAR GIFTS —Å–æ–≥–ª–∞—Å–Ω–æ Telegram API"""
    
    logger.info("üîç –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–ò–°–ö STAR GIFTS (Telegram API)...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º action –ø–æ–ª–µ (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è Star Gifts)
    if hasattr(message, 'action') and message.action:
        action_type = str(type(message.action).__name__)
        logger.info(f"üé¨ Action detected: {action_type}")
        
        # –ò—â–µ–º MessageActionStarGift –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ
        if 'star' in action_type.lower() and 'gift' in action_type.lower():
            logger.info(f"‚≠ê STAR GIFT ACTION –Ω–∞–π–¥–µ–Ω: {action_type}")
            return await extract_star_gift_from_action(message.action, action_type)
        
        if 'gift' in action_type.lower():
            logger.info(f"üéÅ GIFT ACTION –Ω–∞–π–¥–µ–Ω: {action_type}")
            return await extract_star_gift_from_action(message.action, action_type)
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º media –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç Star Gift
    if hasattr(message, 'media') and message.media:
        media_type = str(type(message.media).__name__)
        logger.info(f"üì∫ Media detected: {media_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MessageMediaStarGift
        if 'star' in media_type.lower() and 'gift' in media_type.lower():
            logger.info(f"‚≠ê STAR GIFT MEDIA –Ω–∞–π–¥–µ–Ω: {media_type}")
            return await extract_star_gift_from_media(message.media, media_type)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã/–∞–Ω–∏–º–∞—Ü–∏–∏
        if hasattr(message.media, 'document'):
            doc = message.media.document
            if hasattr(doc, 'attributes'):
                for attr in doc.attributes:
                    attr_type = str(type(attr).__name__)
                    if 'gift' in attr_type.lower():
                        logger.info(f"üéÅ Gift attribute –Ω–∞–π–¥–µ–Ω: {attr_type}")
                        return {
                            "type": "star_gift",
                            "source": "document_attribute",
                            "details": await extract_gift_from_document(doc, attr)
                        }
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º service messages (fallback)
    if hasattr(message, 'service') and message.service:
        service_type = str(type(message.service).__name__)
        logger.info(f"üîß Service message: {service_type}")
        
        # MessageServiceStarGift –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ
        if 'star' in service_type.lower() or 'gift' in service_type.lower():
            logger.info(f"‚≠ê STAR GIFT SERVICE –Ω–∞–π–¥–µ–Ω: {service_type}")
            return await extract_star_gift_from_service(message.service, service_type)
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã Star Gift
    if hasattr(message, 'text') and message.text:
        text = message.text.lower()
        star_gift_patterns = ['star gift', '–ø–æ–¥–∞—Ä–æ–∫', '–∑–≤–µ–∑–¥', 'stars', '‚≠ê', 'üéÅ']
        
        found_patterns = [p for p in star_gift_patterns if p in text]
        if found_patterns:
            logger.info(f"üìù Star Gift –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ: {found_patterns}")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∞—Ä–∫–µ
            if any(word in text for word in ['–ø–æ–ª—É—á–∏–ª', '–æ—Ç–ø—Ä–∞–≤–∏–ª', '–ø–æ–¥–∞—Ä–∏–ª']):
                logger.info("üéÅ –í–æ–∑–º–æ–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ Star Gift")
                return {
                    "type": "star_gift",
                    "source": "text_notification",
                    "details": {
                        "gift_type": "Text Notification",
                        "text": message.text,
                        "patterns": found_patterns
                    }
                }
    
    logger.info("‚ùå Star Gift –ù–ï –Ω–∞–π–¥–µ–Ω")
    return None

async def extract_star_gift_from_action(action, action_type):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Star Gift –∏–∑ action –ø–æ–ª—è"""
    try:
        details = {
            "gift_type": "Star Gift from Action",
            "action_type": action_type,
            "raw_data": str(action)
        }
        
        # –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è Star Gift
        if hasattr(action, 'gift'):
            gift = action.gift
            details["gift_object"] = str(gift)
            
            # –ü–û–õ–ù–ê–Ø StarGift —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ API
            star_gift_fields = [
                'id',                    # ID –ø–æ–¥–∞—Ä–∫–∞
                'stars',                 # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–≤–µ–∑–¥–∞—Ö
                'limited',               # –õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∏
                'sold_out',              # –†–∞—Å–ø—Ä–æ–¥–∞–Ω –ª–∏
                'convert_stars',         # –ó–≤–µ–∑–¥—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                'first_sale_date',       # –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏
                'last_sale_date',        # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏
                'total_count',           # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                'remaining_count',       # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                'availability_remains',  # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                'availability_total',    # –û–±—â–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                'transfer_star_count',   # –ó–≤–µ–∑–¥—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
                'upgrade_star_count',    # –ó–≤–µ–∑–¥—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
                'model',                 # 3D –º–æ–¥–µ–ª—å
                'backdrop',              # –§–æ–Ω
                'symbol',                # –°–∏–º–≤–æ–ª
                'pattern',               # –ü–∞—Ç—Ç–µ—Ä–Ω
                'center_icon',           # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞
                'sticker',               # –°–≤—è–∑–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
                'can_upgrade',           # –ú–æ–∂–Ω–æ –ª–∏ —É–ª—É—á—à–∏—Ç—å
                'can_transfer',          # –ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å
                'is_name_color_default', # –¶–≤–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                'rarity',                # –†–µ–¥–∫–æ—Å—Ç—å
                'type'                   # –¢–∏–ø –ø–æ–¥–∞—Ä–∫–∞
            ]
            
            for field in star_gift_fields:
                if hasattr(gift, field):
                    value = getattr(gift, field)
                    details[field] = value
                    logger.info(f"  üìä {field}: {value}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞
            if details.get('limited'):
                if details.get('remaining_count', 0) == 0:
                    details['gift_category'] = "üî• –†–ï–î–ö–ò–ô (–†–ê–°–ü–†–û–î–ê–ù)"
                else:
                    remaining = details.get('remaining_count', 0)
                    total = details.get('total_count', 0)
                    details['gift_category'] = f"‚≠ê –†–ï–î–ö–ò–ô ({remaining}/{total})"
            else:
                details['gift_category'] = "üéÅ –û–ë–´–ß–ù–´–ô"
            
            if details.get('can_upgrade'):
                details['gift_category'] += " + –£–õ–£–ß–®–ê–ï–ú–´–ô"
            if details.get('can_transfer'):
                details['gift_category'] += " + –ü–ï–†–ï–î–ê–í–ê–ï–ú–´–ô"
        
        return {
            "type": "star_gift",
            "source": "action",
            "details": details
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Star Gift –∏–∑ action: {e}")
        return {
            "type": "star_gift",
            "source": "action",
            "details": {"gift_type": "Star Gift from Action", "raw_data": str(action)}
        }

async def extract_star_gift_from_media(media, media_type):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Star Gift –∏–∑ media –ø–æ–ª—è"""
    try:
        details = {
            "gift_type": "Star Gift from Media",
            "media_type": media_type,
            "raw_data": str(media)
        }
        
        if hasattr(media, 'gift'):
            details["gift_data"] = str(media.gift)
        
        return {
            "type": "star_gift",
            "source": "media",
            "details": details
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Star Gift –∏–∑ media: {e}")
        return {
            "type": "star_gift",
            "source": "media",
            "details": {"gift_type": "Star Gift from Media", "raw_data": str(media)}
        }

async def extract_star_gift_from_service(service, service_type):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Star Gift –∏–∑ service –ø–æ–ª—è"""
    try:
        details = {
            "gift_type": "Star Gift from Service",
            "service_type": service_type,
            "raw_data": str(service)
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        for attr in dir(service):
            if not attr.startswith('_'):
                try:
                    value = getattr(service, attr)
                    if not callable(value):
                        details[attr] = str(value)
                except:
                    pass
        
        return {
            "type": "star_gift",
            "source": "service",
            "details": details
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Star Gift –∏–∑ service: {e}")
        return {
            "type": "star_gift",
            "source": "service", 
            "details": {"gift_type": "Star Gift from Service", "raw_data": str(service)}
        }

async def extract_gift_from_document(document, attribute):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    return {
        "gift_type": "Gift from Document",
        "document_id": getattr(document, 'id', 'unknown'),
        "attribute_type": str(type(attribute).__name__),
        "attribute_data": str(attribute)
    }

async def extract_star_gift_info(service):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Star Gift"""
    try:
        details = {
            "gift_type": "Star Gift",
            "raw_data": str(service)
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
        if hasattr(service, 'gift'):
            gift = service.gift
            if hasattr(gift, 'stars'):
                details["stars"] = gift.stars
            if hasattr(gift, 'id'):
                details["gift_id"] = gift.id
            if hasattr(gift, 'limited'):
                details["limited"] = gift.limited
            if hasattr(gift, 'sold_out'):
                details["sold_out"] = gift.sold_out
                
        return details
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Star Gift info: {e}")
        return {"gift_type": "Star Gift", "raw_data": str(service)}

# –£–¥–∞–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤ - —Ñ–æ–∫—É—Å —Ç–æ–ª—å–∫–æ –Ω–∞ Star Gifts

async def send_gift_response(client, original_message, gift_info):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ STAR GIFT"""
    
    try:
        details = gift_info['details']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        response_text = f"""‚≠ê <b>STAR GIFT –ü–û–õ–£–ß–ï–ù!</b>

üéÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {details.get('gift_category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚≠ê <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {details.get('stars', 'N/A')} –∑–≤–µ–∑–¥
üÜî <b>ID –ø–æ–¥–∞—Ä–∫–∞:</b> {details.get('id', 'N/A')}

üìä <b>–†–ï–î–ö–û–°–¢–¨:</b>
üèÜ <b>–õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π:</b> {'–î–∞' if details.get('limited') else '–ù–µ—Ç'}
üìà <b>–û—Å—Ç–∞—Ç–æ–∫:</b> {details.get('remaining_count', 'N/A')}/{details.get('total_count', 'N/A')}
üî• <b>–†–∞—Å–ø—Ä–æ–¥–∞–Ω:</b> {'–î–∞' if details.get('sold_out') else '–ù–µ—Ç'}

‚ú® <b>–í–û–ó–ú–û–ñ–ù–û–°–¢–ò:</b>
üîÑ <b>–ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:</b> {'–î–∞' if details.get('can_upgrade') else '–ù–µ—Ç'}
üì§ <b>–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å:</b> {'–î–∞' if details.get('can_transfer') else '–ù–µ—Ç'}
‚≠ê <b>–ó–≤–µ–∑–¥—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏:</b> {details.get('transfer_star_count', 'N/A')}
üåü <b>–ó–≤–µ–∑–¥—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:</b> {details.get('upgrade_star_count', 'N/A')}

üé® <b>–î–ò–ó–ê–ô–ù:</b>
üè† <b>–ú–æ–¥–µ–ª—å:</b> {details.get('model', 'N/A')}
üñºÔ∏è <b>–§–æ–Ω:</b> {details.get('backdrop', 'N/A')}
üî£ <b>–°–∏–º–≤–æ–ª:</b> {details.get('symbol', 'N/A')}
üé≠ <b>–ü–∞—Ç—Ç–µ—Ä–Ω:</b> {details.get('pattern', 'N/A')}

üìÖ <b>–î–ê–¢–´:</b>
üöÄ <b>–ü–µ—Ä–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞:</b> {details.get('first_sale_date', 'N/A')}
üèÅ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞:</b> {details.get('last_sale_date', 'N/A')}

üÜî <b>ID —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {original_message.message_id}
‚è∞ <b>–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è:</b> {datetime.now().strftime('%H:%M:%S')}

üåü <b>–°–ü–ê–°–ò–ë–û –ó–ê –ö–û–õ–õ–ï–ö–¶–ò–û–ù–ù–´–ô STAR GIFT!</b> üåü"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if original_message.from_user:
            try:
                await client.send_message(
                    chat_id=original_message.from_user.id,
                    text=response_text,
                    parse_mode="HTML"
                )
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ STAR GIFT –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {original_message.from_user.id}")
            except Exception as dm_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°: {dm_error}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç
                if original_message.chat:
                    await client.send_message(
                        chat_id=original_message.chat.id,
                        text=response_text,
                        parse_mode="HTML",
                        reply_to_message_id=original_message.message_id
                    )
                    logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ STAR GIFT –≤ —á–∞—Ç {original_message.chat.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

class TelegramConfig(BaseModel):
    api_id: str
    api_hash: str
    phone_number: str

@app.get("/", response_class=HTMLResponse)
async def index():
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Telegram Gift Detector</title>
        <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }
        .form-group { margin: 15px 0; }
        .form-group label { display: block; margin-bottom: 5px; font-weight: bold; }
        .form-group input { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
        .btn { padding: 10px 20px; margin: 5px; border: none; border-radius: 5px; cursor: pointer; background: #007bff; color: white; }
        .btn:hover { background: #0056b3; }
        .danger { background: #dc3545; }
        .danger:hover { background: #c82333; }
        #auth-fields { background: #f0f8ff; border: 2px solid #007bff; border-radius: 10px; padding: 20px; margin: 20px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üéÅ Telegram Gift Detector</h1>
            
            <div class="form-group">
                <label>API ID:</label>
                <input type="text" id="api_id" placeholder="–í–∞—à API ID">
            </div>
            <div class="form-group">
                <label>API Hash:</label>
                <input type="text" id="api_hash" placeholder="–í–∞—à API Hash">
            </div>
            <div class="form-group">
                <label>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</label>
                <input type="text" id="phone_number" placeholder="+7XXXXXXXXXX">
            </div>
            
            <div id="auth-fields">
                <h3>üì± –ü–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</h3>
                <div class="form-group">
                    <label>SMS –∫–æ–¥:</label>
                    <input type="text" id="sms_code" placeholder="12345" maxlength="5">
                    <small>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS</small>
                </div>
                <div class="form-group">
                    <label>–ü–∞—Ä–æ–ª—å 2FA (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω):</label>
                    <input type="password" id="two_fa_password" placeholder="–í–∞—à –ø–∞—Ä–æ–ª—å 2FA">
                    <small>–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ 2FA –Ω–µ –≤–∫–ª—é—á–µ–Ω</small>
                </div>
                <button class="btn" onclick="completeAuth()">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</button>
            </div>
            
                    <button class="btn" onclick="startDetector()">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä</button>
        <button class="btn danger" onclick="stopDetector()">‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä</button>
        <button class="btn" onclick="checkAuthStatus()">üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</button>
        <button class="btn" onclick="viewHistory()">üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤</button>
        <button class="btn" onclick="simulateGift()">üéÅ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫</button>
        <button class="btn" onclick="viewSessions()">üíæ –°–µ—Å—Å–∏–∏</button>
            
            <div style="margin-top: 20px;">
                <h3>–°—Ç–∞—Ç—É—Å: <span id="status">–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</span></h3>
                <p>–ü–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: <span id="gifts-count">0</span></p>
            </div>
        </div>

        <script>
        function startDetector() {
            const config = {
                api_id: document.getElementById('api_id').value,
                api_hash: document.getElementById('api_hash').value,
                phone_number: document.getElementById('phone_number').value
            };
            
            if (!config.api_id || !config.api_hash || !config.phone_number) {
                alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
                return;
            }
            
            fetch('/detector/start', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(config)
            })
            .then(response => response.json())
            .then(data => {
                alert('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ' + data.message);
                console.log('–î–∞–Ω–Ω—ã–µ:', data);
            })
            .catch(error => {
                alert('–û—à–∏–±–∫–∞: ' + error.message);
                console.error('–û—à–∏–±–∫–∞:', error);
            });
        }
        
        function completeAuth() {
            const authData = {
                sms_code: document.getElementById('sms_code').value,
                password: document.getElementById('two_fa_password').value
            };
            
            if (!authData.sms_code) {
                alert('–í–≤–µ–¥–∏—Ç–µ SMS –∫–æ–¥!');
                return;
            }
            
            fetch('/detector/complete_auth', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(authData)
            })
            .then(response => response.json())
            .then(data => {
                alert('–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + data.message);
                console.log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', data);
            })
            .catch(error => {
                alert('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + error.message);
                console.error('–û—à–∏–±–∫–∞:', error);
            });
        }
        
        function stopDetector() {
            fetch('/detector/stop', {method: 'POST'})
            .then(response => response.json())
            .then(data => alert(data.message))
            .catch(error => alert('–û—à–∏–±–∫–∞: ' + error.message));
        }
        
                    function refreshStatus() {
                fetch('/detector/status')
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('status').textContent = data.status;
                        document.getElementById('gifts-count').textContent = data.gifts_found || 0;
                    })
                    .catch(error => console.error('Error:', error));
            }
            
            function checkAuthStatus() {
                fetch('/detector/auth_status')
                    .then(response => response.json())
                    .then(data => {
                        alert('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\\n' + JSON.stringify(data, null, 2));
                        console.log('Auth Status:', data);
                    })
                    .catch(error => alert('–û—à–∏–±–∫–∞: ' + error.message));
            }
            
            function viewHistory() {
                fetch('/detector/history')
                    .then(response => response.json())
                    .then(data => {
                        let historyText = `–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: ${data.total_count}\\n\\n`;
                        data.gifts.forEach((gift, index) => {
                            historyText += `${index + 1}. ${gift.gift_info.details.gift_category} (${gift.timestamp})\\n`;
                        });
                        alert(historyText || '–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞');
                    })
                    .catch(error => alert('–û—à–∏–±–∫–∞: ' + error.message));
            }
            
            function simulateGift() {
                fetch('/detector/simulate-gift', {method: 'POST'})
                    .then(response => response.json())
                    .then(data => {
                        alert(data.message);
                        refreshStatus(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                    })
                    .catch(error => alert('–û—à–∏–±–∫–∞: ' + error.message));
            }
            
            function viewSessions() {
                fetch('/detector/sessions')
                    .then(response => response.json())
                    .then(data => {
                        let sessionsText = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:\\n\\n';
                        if (data.sessions.length === 0) {
                            sessionsText += '–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π';
                        } else {
                            data.sessions.forEach(session => {
                                sessionsText += `üìÅ ${session.name} (${session.size} bytes, ${session.modified})\\n`;
                            });
                        }
                        alert(sessionsText);
                    })
                    .catch(error => alert('–û—à–∏–±–∫–∞: ' + error.message));
            }
            
            setInterval(refreshStatus, 5000);
            refreshStatus();
        </script>
    </body>
    </html>
    """

@app.get("/detector/status")
async def get_status():
    return detector_status

@app.post("/detector/start")
async def start_detector(config: TelegramConfig):
    if detector_status["running"]:
        raise HTTPException(status_code=400, detail="–î–µ—Ç–µ–∫—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not config.api_id or not config.api_hash or not config.phone_number:
        raise HTTPException(status_code=400, detail="–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    if not config.api_id.isdigit():
        raise HTTPException(status_code=400, detail="API ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
        
    if len(config.api_hash) < 32:
        raise HTTPException(status_code=400, detail="API Hash —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 32+ —Å–∏–º–≤–æ–ª–æ–≤)")
        
    if not config.phone_number.startswith('+'):
        raise HTTPException(status_code=400, detail="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +")
        
    logger.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: API ID –¥–ª–∏–Ω–∞={len(config.api_id)}, API Hash –¥–ª–∏–Ω–∞={len(config.api_hash)}, Phone={config.phone_number}")
    
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        try:
            from pyrogram import Client
            from pyrogram.errors import SessionPasswordNeeded
            logger.info("Pyrogram –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except ImportError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Pyrogram: {e}")
            raise HTTPException(status_code=500, detail=f"Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {str(e)}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–π
        import os
        import tempfile
        
        sessions_dir = os.path.join(tempfile.gettempdir(), "telegram_sessions")
        if not os.path.exists(sessions_dir):
            os.makedirs(sessions_dir, mode=0o755)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ —Å–µ—Å—Å–∏–π: {sessions_dir}")
        
        session_name = f"gift_detector_{config.phone_number.replace('+', '').replace(' ', '')}"
        session_file = os.path.join(sessions_dir, session_name)
        logger.info(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏
        try:
            test_file = os.path.join(sessions_dir, "test_write")
            with open(test_file, 'w') as f:
                f.write("test")
            os.remove(test_file)
            logger.info("–ü—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏: {e}")
            session_file = ":memory:"
            sessions_dir = None
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –≤ –ø–∞–º—è—Ç–∏")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        logger.info("–°–æ–∑–¥–∞–µ–º Pyrogram –∫–ª–∏–µ–Ω—Ç...")
        if session_file == ":memory:":
            client = Client(
                name=session_name,
                api_id=int(config.api_id),
                api_hash=config.api_hash,
                phone_number=config.phone_number,
                in_memory=True
            )
        else:
            client = Client(
                name=session_file,
                api_id=int(config.api_id),
                api_hash=config.api_hash,
                phone_number=config.phone_number,
                workdir=sessions_dir
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ auth_session
        auth_session["client"] = client
        auth_session["config"] = config
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        logger.info("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
        await client.connect()
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        try:
            me = await client.get_me()
            if me:
                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –¥–µ–π—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è {me.first_name}")
                auth_session["awaiting_sms"] = False
                detector_status["running"] = True
                detector_status["status"] = "–ê–∫—Ç–∏–≤–µ–Ω"
                detector_status["start_time"] = datetime.now()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å—Ä–∞–∑—É
                await start_gift_detector(client)
                
                return {"message": "–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞, –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω!", "status": "success"}
        except Exception as e:
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –∫–æ–¥ –Ω–∞ {config.phone_number}...")
        sent_code = await client.send_code(config.phone_number)
        
        auth_session["awaiting_sms"] = True
        auth_session["sent_code"] = sent_code
        auth_session["phone_number"] = config.phone_number
        
        logger.info(f"SMS –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {config.phone_number}")
        return {
            "message": f"SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {config.phone_number}. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ.", 
            "status": "sms_required"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        if auth_session.get("client"):
            try:
                await auth_session["client"].disconnect()
            except:
                pass
            auth_session["client"] = None
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.post("/detector/complete_auth")
async def complete_auth(auth_data: dict):
    if not auth_session.get("client"):
        raise HTTPException(status_code=400, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä'")
        
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    try:
        from pyrogram.errors import SessionPasswordNeeded, BadRequest
        
        client = auth_session["client"]
        sms_code = auth_data.get("sms_code")
        password = auth_data.get("password", "")
        
        if not sms_code:
            raise HTTPException(status_code=400, detail="SMS –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å SMS –∫–æ–¥–æ–º: {sms_code}")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å SMS –∫–æ–¥–æ–º (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
            await client.sign_in(auth_session["config"].phone_number, auth_session["sent_code"].phone_code_hash, sms_code)
            logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ SMS —É—Å–ø–µ—à–Ω–∞!")
            
        except SessionPasswordNeeded:
            logger.info("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA")
            if not password:
                return {
                    "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.", 
                    "status": "password_required"
                }
            
            await client.check_password(password)
            logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ 2FA —É—Å–ø–µ—à–Ω–∞!")
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
        auth_session["awaiting_sms"] = False
        detector_status["running"] = True
        detector_status["status"] = "–ê–∫—Ç–∏–≤–µ–Ω"
        detector_status["start_time"] = datetime.now()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        await start_gift_detector(client)
        
        logger.info("–î–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return {
            "message": "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.", 
            "status": "success"
        }
        
    except BadRequest as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π SMS –∫–æ–¥: {e}")
        return {
            "message": f"–ù–µ–≤–µ—Ä–Ω—ã–π SMS –∫–æ–¥: {str(e)}", 
            "status": "error"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return {
            "message": f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", 
            "status": "error"
        }

@app.post("/detector/stop")
async def stop_detector():
    global detector_status
    detector_status["running"] = False
    detector_status["status"] = "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    detector_status["stop_time"] = datetime.now()
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if "client" in auth_session and auth_session["client"]:
        try:
            await auth_session["client"].stop()
            logger.info("–ö–ª–∏–µ–Ω—Ç Pyrogram –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    
    return {"message": "–î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "status": "success"}

@app.get("/detector/history")
async def get_gift_history():
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤"""
    return {
        "gifts": detector_status.get("gifts_history", []),
        "total_count": detector_status.get("gifts_found", 0)
    }

@app.get("/detector/auth_status")
async def get_auth_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    return {
        "auth_session": {
            "awaiting_sms": auth_session.get("awaiting_sms", False),
            "phone_number": auth_session.get("phone_number", ""),
            "has_client": "client" in auth_session,
            "has_sent_code": "sent_code" in auth_session
        },
        "detector_status": detector_status
    }

@app.get("/detector/sessions")
async def list_sessions():
    """–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    try:
        if not os.path.exists(sessions_dir):
            return {"sessions": []}
        
        sessions = []
        for file in os.listdir(sessions_dir):
            if file.endswith('.session'):
                session_name = file.replace('.session', '')
                file_path = os.path.join(sessions_dir, file)
                stat = os.stat(file_path)
                sessions.append({
                    "name": session_name,
                    "size": stat.st_size,
                    "modified": datetime.fromtimestamp(stat.st_mtime).isoformat()
                })
        return {"sessions": sessions}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π: {e}")
        return {"sessions": [], "error": str(e)}

@app.delete("/detector/sessions/{session_name}")
async def delete_session(session_name: str):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é"""
    try:
        session_file = os.path.join(sessions_dir, f"{session_name}.session")
        if os.path.exists(session_file):
            os.remove(session_file)
            return {"message": f"–°–µ—Å—Å–∏—è {session_name} —É–¥–∞–ª–µ–Ω–∞", "status": "success"}
        else:
            return {"message": f"–°–µ—Å—Å–∏—è {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "status": "error"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
        return {"message": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}", "status": "error"}

@app.post("/detector/simulate-gift")
async def simulate_gift():
    """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not detector_status["running"]:
        return {"message": "–î–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω", "status": "error"}
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫
    test_gift = {
        "type": "star_gift",
        "source": "simulation",
        "details": {
            "gift_category": "üéÅ –¢–ï–°–¢–û–í–´–ô –ü–û–î–ê–†–û–ö",
            "stars": 15,
            "id": "test_bear_001",
            "limited": True,
            "remaining_count": 50,
            "total_count": 1000,
            "can_upgrade": True,
            "can_transfer": True,
            "transfer_star_count": 25,
            "upgrade_star_count": 50,
            "model": "bear_3d_model",
            "backdrop": "forest_backdrop",
            "symbol": "üêª",
            "pattern": "golden_pattern"
        }
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    if "gifts_history" not in detector_status:
        detector_status["gifts_history"] = []
    
    detector_status["gifts_history"].append({
        "gift_info": test_gift,
        "timestamp": datetime.now().isoformat(),
        "message_id": "TEST_MSG",
        "chat_id": "TEST_CHAT"
    })
    
    detector_status["gifts_found"] = detector_status.get("gifts_found", 0) + 1
    
    return {"message": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é", "status": "success", "gift": test_gift}