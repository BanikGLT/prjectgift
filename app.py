#!/usr/bin/env python3
"""
Telegram Gift Detector - Smart Deploy Version
–£–º–Ω–∞—è –≤–µ—Ä—Å–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Telegram –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∏–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""

import os
import sys
import asyncio
import logging
from typing import Optional, Dict, Any

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.responses import HTMLResponse, JSONResponse
from pydantic import BaseModel

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫
TELEGRAM_AVAILABLE = False
telegram_detector = None

try:
    from pyrogram import Client
    from pyrogram.errors import RPCError
    TELEGRAM_AVAILABLE = True
    print("‚úÖ Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–∞–π–¥–µ–Ω—ã - –ø–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞")
except ImportError:
    print("‚ö†Ô∏è Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    Client = None
    RPCError = Exception

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="üéÅ Telegram Gift Detector",
    description="Professional Edition - Successfully Deployed!",
    version="1.0.0"
)

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    if TELEGRAM_AVAILABLE:
        status_color = "#d4edda"
        status_text_color = "#155724"
        status_message = "‚úÖ Successfully Deployed!<br>üöÄ Telegram libraries available"
        setup_section = """
        <div class="setup">
            <h3>üîß Setup Required</h3>
            <p>To start detecting gifts, you need to:</p>
            <ol style="text-align: left; max-width: 400px; margin: 0 auto;">
                <li>Get API credentials from <a href="https://my.telegram.org/apps" target="_blank">my.telegram.org/apps</a></li>
                <li>Set environment variables: API_ID, API_HASH, PHONE_NUMBER</li>
                <li>Start the detector via API</li>
            </ol>
        </div>
        """
    else:
        status_color = "#fff3cd"
        status_text_color = "#856404"
        status_message = "‚ö†Ô∏è Deployed in Setup Mode<br>üì¶ Telegram libraries not installed"
        setup_section = """
        <div class="setup warning">
            <h3>üì¶ Installation Required</h3>
            <p>To enable Telegram functionality, install dependencies:</p>
            <code style="background: #f8f9fa; padding: 10px; border-radius: 4px; display: block; margin: 10px 0;">
                pip install pyrogram tgcrypto
            </code>
            <p><small>Or use requirements_full.txt for complete setup</small></p>
        </div>
        """
    
    html = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>üéÅ Telegram Gift Detector</title>
        <style>
            body {{ 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                margin: 0; padding: 0; min-height: 100vh;
                display: flex; align-items: center; justify-content: center;
            }}
            .container {{ 
                background: white; border-radius: 20px; padding: 40px; 
                box-shadow: 0 20px 40px rgba(0,0,0,0.1); text-align: center;
                max-width: 600px; width: 90%;
            }}
            h1 {{ color: #333; margin-bottom: 20px; font-size: 2.5em; }}
            .status {{ 
                background: {status_color}; color: {status_text_color}; padding: 20px; 
                border-radius: 10px; margin: 20px 0; font-size: 1.2em;
            }}
            .links {{ margin-top: 30px; }}
            .links a {{ 
                display: inline-block; margin: 10px; padding: 12px 24px;
                background: #007bff; color: white; text-decoration: none;
                border-radius: 8px; transition: all 0.3s;
            }}
            .links a:hover {{ background: #0056b3; transform: translateY(-2px); }}
            .setup {{ 
                margin-top: 20px; padding: 20px; background: #f8f9fa; 
                border-radius: 10px; text-align: left;
            }}
            .setup.warning {{ background: #fff3cd; border-left: 4px solid #ffc107; }}
            .info {{ margin-top: 20px; color: #666; font-size: 0.9em; }}
            code {{ font-family: 'Courier New', monospace; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üéÅ Telegram Gift Detector</h1>
            <p><strong>Professional Edition</strong></p>
            
            <div class="status">
                {status_message}
            </div>
            
            {setup_section}
            
            <div class="links">
                <a href="/docs">üìö API Documentation</a>
                <a href="/health">üîç Health Check</a>
                <a href="/api/status">üìä Status</a>
                {"<a href='/api/start'>üöÄ Start Detector</a>" if TELEGRAM_AVAILABLE else ""}
            </div>
            
            <div class="info">
                <p>üéØ Professional Telegram Gift Detection System</p>
                <p>{"üîß Configure API keys to start detecting" if TELEGRAM_AVAILABLE else "üì¶ Install dependencies to enable functionality"}</p>
            </div>
        </div>
    </body>
    </html>
    """
    return HTMLResponse(content=html)

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {
        "status": "healthy",
        "message": "Telegram Gift Detector API is running successfully",
        "version": "1.0.0",
        "timestamp": "2024-01-15T12:00:00Z"
    }

@app.get("/api/status")
async def api_status():
    """–°—Ç–∞—Ç—É—Å API —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π Telegram"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram
    telegram_config = {
        "api_id": os.environ.get("API_ID"),
        "api_hash": os.environ.get("API_HASH"), 
        "phone_number": os.environ.get("PHONE_NUMBER")
    }
    
    config_ready = all([
        telegram_config["api_id"],
        telegram_config["api_hash"],
        telegram_config["phone_number"]
    ])
    
    return {
        "success": True,
        "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
        "data": {
            "is_running": True,
            "telegram_available": TELEGRAM_AVAILABLE,
            "config_ready": config_ready,
            "detector_status": "ready" if (TELEGRAM_AVAILABLE and config_ready) else "needs_setup",
            "deployment": "successful",
            "environment": os.environ.get("ENVIRONMENT", "production"),
            "missing_config": [k for k, v in telegram_config.items() if not v] if not config_ready else []
        }
    }

@app.get("/api/info")
async def api_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
    return {
        "app_name": "Telegram Gift Detector",
        "version": "1.0.0",
        "description": "Professional Edition for detecting Telegram gifts",
        "telegram_available": TELEGRAM_AVAILABLE,
        "endpoints": {
            "root": "/",
            "health": "/health", 
            "status": "/api/status",
            "start": "/api/start" if TELEGRAM_AVAILABLE else None,
            "stop": "/api/stop" if TELEGRAM_AVAILABLE else None,
            "docs": "/docs",
            "redoc": "/redoc"
        },
        "features": [
            "FastAPI web interface",
            "Smart dependency detection",
            "Telegram gift detection" if TELEGRAM_AVAILABLE else "Setup mode",
            "Real-time monitoring" if TELEGRAM_AVAILABLE else "Configuration helper",
            "API documentation"
        ],
        "requirements": {
            "basic": ["fastapi", "uvicorn"],
            "telegram": ["pyrogram", "tgcrypto"] if not TELEGRAM_AVAILABLE else "‚úÖ installed"
        }
    }

# Telegram endpoints (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
if TELEGRAM_AVAILABLE:
    
    @app.post("/api/start")
    async def start_detector():
        """–ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        api_id = os.environ.get("API_ID")
        api_hash = os.environ.get("API_HASH")
        phone_number = os.environ.get("PHONE_NUMBER")
        
        if not all([api_id, api_hash, phone_number]):
            raise HTTPException(
                status_code=400,
                detail={
                    "error": "Missing configuration",
                    "message": "Set API_ID, API_HASH, and PHONE_NUMBER environment variables",
                    "missing": [k for k, v in {
                        "API_ID": api_id,
                        "API_HASH": api_hash, 
                        "PHONE_NUMBER": phone_number
                    }.items() if not v]
                }
            )
        
        global telegram_detector
        
        if telegram_detector:
            return {"success": False, "message": "Detector already running"}
        
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é
            return {
                "success": True,
                "message": "Detector started successfully",
                "data": {
                    "status": "starting",
                    "config": {
                        "api_id": api_id,
                        "phone": phone_number[:3] + "***" + phone_number[-4:] if phone_number else None
                    }
                }
            }
            
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"Failed to start detector: {str(e)}")
    
    @app.post("/api/stop") 
    async def stop_detector():
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        global telegram_detector
        
        if not telegram_detector:
            return {"success": False, "message": "Detector not running"}
        
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            telegram_detector = None
            return {"success": True, "message": "Detector stopped"}
            
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"Failed to stop detector: {str(e)}")

else:
    
    @app.post("/api/start")
    async def start_detector_unavailable():
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        raise HTTPException(
            status_code=503,
            detail={
                "error": "Telegram libraries not available",
                "message": "Install pyrogram and tgcrypto to enable detector functionality",
                "install_command": "pip install pyrogram tgcrypto"
            }
        )

# –î–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    import uvicorn
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –æ–±–ª–∞—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º)
    port = int(os.environ.get("PORT", 8000))
    
    print(f"üöÄ Starting Telegram Gift Detector on port {port}")
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=port,
        log_level="info"
    )