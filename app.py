from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import logging
from datetime import datetime
import asyncio

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
detector_status = {
    "running": False,
    "status": "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
    "gifts_found": 0,
    "uptime": "0",
    "start_time": None,
    "history": []
}

auth_session = {
    "client": None,
    "config": None,
    "awaiting_sms": False,
    "awaiting_password": False
}

gift_history = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
async def start_gift_detector(client):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ Star Gifts"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ)
    @client.on_message()
    async def handle_message(client, message):
        await process_message_for_gifts(client, message)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è RAW updates (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ê–ì–†–ï–°–°–ò–í–ù–´–ô)
    @client.on_raw_update()
    async def handle_raw_update(client, update, users, chats):
        try:
            update_name = type(update).__name__
            
            # –õ–û–ì–ò–†–£–ï–ú –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï UPDATES
            logger.info(f"üîÑ RAW UPDATE: {update_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏ –≤ –õ–Æ–ë–´–• updates
            if any(keyword in update_name.lower() for keyword in ['gift', 'star', 'present', '–ø–æ–¥–∞—Ä–æ–∫']):
                logger.info(f"‚≠ê –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ô GIFT UPDATE: {update_name}")
                logger.info(f"üìÑ –ü–û–õ–ù–´–ï –¥–∞–Ω–Ω—ã–µ update: {str(update)}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ
                gift_info = await extract_gift_from_update(update, update_name)
                if gift_info:
                    logger.info(f"üéÅ –ü–û–î–ê–†–û–ö –ù–ê–ô–î–ï–ù –í RAW UPDATE!")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    detector_status["gifts_found"] += 1
                    gift_history.append({
                        "timestamp": datetime.now().isoformat(),
                        "gift_info": gift_info,
                        "source": "raw_update",
                        "update_type": update_name
                    })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ Star Gift –≤ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            if hasattr(update, 'message'):
                await process_message_for_gifts(client, update.message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è update –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤
            for attr_name in dir(update):
                if not attr_name.startswith('_'):
                    try:
                        attr_value = getattr(update, attr_name)
                        if attr_value and 'gift' in str(attr_value).lower():
                            logger.info(f"üéÅ GIFT –≤ –∞—Ç—Ä–∏–±—É—Ç–µ {attr_name}: {str(attr_value)[:200]}")
                    except:
                        pass
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ raw update: {e}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –í–°–ï–• —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    @client.on_message(group=-1)  # –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    async def handle_all_messages(client, message):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ö–ê–ñ–î–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤
            message_text = getattr(message, 'text', '') or ''
            message_caption = getattr(message, 'caption', '') or ''
            
            # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ
            full_text = (message_text + ' ' + message_caption).lower()
            gift_keywords = ['star', 'gift', '–ø–æ–¥–∞—Ä–æ–∫', '–∑–≤–µ–∑–¥', 'stars', '‚≠ê', 'üéÅ', '–º–∏—à–∫–∞', 'bear']
            
            found_keywords = [kw for kw in gift_keywords if kw in full_text]
            if found_keywords:
                logger.info(f"üîç –°–û–û–ë–©–ï–ù–ò–ï –° GIFT KEYWORDS: {found_keywords}")
                logger.info(f"üìù –¢–µ–∫—Å—Ç: {full_text[:200]}")
                logger.info(f"üì® –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(message)[:500]}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_all_messages: {e}")

async def extract_gift_from_update(update, update_name):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ raw update"""
    try:
        gift_info = {
            "type": "star_gift",
            "source": "raw_update",
            "update_type": update_name,
            "details": {
                "gift_type": f"Gift from {update_name}",
                "raw_data": str(update)
            }
        }
        
        # –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤
        for attr in dir(update):
            if not attr.startswith('_'):
                try:
                    value = getattr(update, attr)
                    if value and any(keyword in str(value).lower() for keyword in ['gift', 'star', '–ø–æ–¥–∞—Ä–æ–∫']):
                        gift_info["details"][attr] = str(value)
                except:
                    pass
        
        return gift_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ update: {e}")
        return None
    
    async def process_message_for_gifts(client, message):
        try:
            # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ö–ê–ñ–î–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
            logger.info(f"üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:")
            logger.info(f"  - ID: {message.message_id}")
            logger.info(f"  - –û—Ç: {message.from_user.id if message.from_user else 'unknown'}")
            logger.info(f"  - –ß–∞—Ç: {message.chat.id if message.chat else 'unknown'}")
            logger.info(f"  - –¢–∏–ø: {type(message)}")
            logger.info(f"  - –¢–µ–∫—Å—Ç: {message.text[:100] if message.text else '–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞'}")
            
            # –ü–†–û–í–ï–†–Ø–ï–ú –í–°–ï –ê–¢–†–ò–ë–£–¢–´ –°–û–û–ë–©–ï–ù–ò–Ø
            logger.info(f"  - –ï—Å—Ç—å service: {hasattr(message, 'service')}")
            if hasattr(message, 'service') and message.service:
                logger.info(f"  - Service type: {type(message.service)}")
                logger.info(f"  - Service name: {type(message.service).__name__}")
                logger.info(f"  - Service data: {str(message.service)[:500]}")
                logger.info(f"  - Service attributes: {[attr for attr in dir(message.service) if not attr.startswith('_')]}")
            
            # –ü–†–û–í–ï–†–Ø–ï–ú –î–†–£–ì–ò–ï –í–û–ó–ú–û–ñ–ù–´–ï –ü–û–õ–Ø
            logger.info(f"  - –ï—Å—Ç—å media: {hasattr(message, 'media')}")
            logger.info(f"  - –ï—Å—Ç—å action: {hasattr(message, 'action')}")
            logger.info(f"  - –ï—Å—Ç—å gift: {hasattr(message, 'gift')}")
            logger.info(f"  - –ï—Å—Ç—å star_gift: {hasattr(message, 'star_gift')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏
            gift_info = await check_for_gifts(message)
            if gift_info:
                logger.info(f"üéÅ –ù–ê–ô–î–ï–ù –ü–û–î–ê–†–û–ö: {gift_info}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                gift_history.append({
                    "timestamp": datetime.now().isoformat(),
                    "gift_info": gift_info,
                    "message_id": message.message_id,
                    "from_user": message.from_user.id if message.from_user else None
                })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                detector_status["gifts_found"] += 1
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
                await send_gift_response(client, message, gift_info)
            else:
                logger.info("‚ùå –ü–æ–¥–∞—Ä–æ–∫ –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–π–º–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        from pyrogram import filters
        
        @client.on_message(filters.outgoing)  # –ò—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        async def handle_outgoing_messages(client, message):
            try:
                logger.info(f"üì§ –ò–°–•–û–î–Ø–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï: {message.message_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤
                if hasattr(message, 'media') and message.media:
                    logger.info(f"üì∫ –ò—Å—Ö–æ–¥—è—â–µ–µ media: {type(message.media).__name__}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∏—Å—Ö–æ–¥—è—â–∏—Ö
                gift_info = await check_for_gifts(message)
                if gift_info:
                    logger.info(f"üéÅ –ü–û–î–ê–†–û–ö –í –ò–°–•–û–î–Ø–©–ï–ú –°–û–û–ë–©–ï–ù–ò–ò!")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_outgoing_messages: {e}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è outgoing handler: {e}")
    
    logger.info("üéÅ –î–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!")
    logger.info("üîç –í–∫–ª—é—á–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:")
    logger.info("  - üì® –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    logger.info("  - üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")  
    logger.info("  - üîÑ Raw updates")
    logger.info("  - üîç Keyword scanning")

async def check_for_gifts(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ STAR GIFTS —Å–æ–≥–ª–∞—Å–Ω–æ Telegram API"""
    
    logger.info("üîç –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–ò–°–ö STAR GIFTS (Telegram API)...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º action –ø–æ–ª–µ (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è Star Gifts)
    if hasattr(message, 'action') and message.action:
        action_type = str(type(message.action).__name__)
        logger.info(f"üé¨ Action detected: {action_type}")
        
        # –ò—â–µ–º MessageActionStarGift –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ
        if 'star' in action_type.lower() and 'gift' in action_type.lower():
            logger.info(f"‚≠ê STAR GIFT ACTION –Ω–∞–π–¥–µ–Ω: {action_type}")
            return await extract_star_gift_from_action(message.action, action_type)
        
        if 'gift' in action_type.lower():
            logger.info(f"üéÅ GIFT ACTION –Ω–∞–π–¥–µ–Ω: {action_type}")
            return await extract_star_gift_from_action(message.action, action_type)
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º media –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç Star Gift
    if hasattr(message, 'media') and message.media:
        media_type = str(type(message.media).__name__)
        logger.info(f"üì∫ Media detected: {media_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MessageMediaStarGift
        if 'star' in media_type.lower() and 'gift' in media_type.lower():
            logger.info(f"‚≠ê STAR GIFT MEDIA –Ω–∞–π–¥–µ–Ω: {media_type}")
            return await extract_star_gift_from_media(message.media, media_type)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã/–∞–Ω–∏–º–∞—Ü–∏–∏
        if hasattr(message.media, 'document'):
            doc = message.media.document
            if hasattr(doc, 'attributes'):
                for attr in doc.attributes:
                    attr_type = str(type(attr).__name__)
                    if 'gift' in attr_type.lower():
                        logger.info(f"üéÅ Gift attribute –Ω–∞–π–¥–µ–Ω: {attr_type}")
                        return {
                            "type": "star_gift",
                            "source": "document_attribute",
                            "details": await extract_gift_from_document(doc, attr)
                        }
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º service messages (fallback)
    if hasattr(message, 'service') and message.service:
        service_type = str(type(message.service).__name__)
        logger.info(f"üîß Service message: {service_type}")
        
        # MessageServiceStarGift –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ
        if 'star' in service_type.lower() or 'gift' in service_type.lower():
            logger.info(f"‚≠ê STAR GIFT SERVICE –Ω–∞–π–¥–µ–Ω: {service_type}")
            return await extract_star_gift_from_service(message.service, service_type)
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã Star Gift
    if hasattr(message, 'text') and message.text:
        text = message.text.lower()
        star_gift_patterns = ['star gift', '–ø–æ–¥–∞—Ä–æ–∫', '–∑–≤–µ–∑–¥', 'stars', '‚≠ê', 'üéÅ']
        
        found_patterns = [p for p in star_gift_patterns if p in text]
        if found_patterns:
            logger.info(f"üìù Star Gift –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ: {found_patterns}")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∞—Ä–∫–µ
            if any(word in text for word in ['–ø–æ–ª—É—á–∏–ª', '–æ—Ç–ø—Ä–∞–≤–∏–ª', '–ø–æ–¥–∞—Ä–∏–ª']):
                logger.info("üéÅ –í–æ–∑–º–æ–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ Star Gift")
                return {
                    "type": "star_gift",
                    "source": "text_notification",
                    "details": {
                        "gift_type": "Text Notification",
                        "text": message.text,
                        "patterns": found_patterns
                    }
                }
    
    logger.info("‚ùå Star Gift –ù–ï –Ω–∞–π–¥–µ–Ω")
    return None

async def extract_star_gift_from_action(action, action_type):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Star Gift –∏–∑ action –ø–æ–ª—è"""
    try:
        details = {
            "gift_type": "Star Gift from Action",
            "action_type": action_type,
            "raw_data": str(action)
        }
        
        # –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è Star Gift
        if hasattr(action, 'gift'):
            gift = action.gift
            details["gift_object"] = str(gift)
            
            # –ü–æ–ª—è –∏–∑ StarGift —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            for field in ['id', 'stars', 'limited', 'sold_out', 'convert_stars', 'first_sale_date', 'last_sale_date']:
                if hasattr(gift, field):
                    details[field] = getattr(gift, field)
        
        return {
            "type": "star_gift",
            "source": "action",
            "details": details
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Star Gift –∏–∑ action: {e}")
        return {
            "type": "star_gift",
            "source": "action",
            "details": {"gift_type": "Star Gift from Action", "raw_data": str(action)}
        }

async def extract_star_gift_from_media(media, media_type):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Star Gift –∏–∑ media –ø–æ–ª—è"""
    try:
        details = {
            "gift_type": "Star Gift from Media",
            "media_type": media_type,
            "raw_data": str(media)
        }
        
        if hasattr(media, 'gift'):
            details["gift_data"] = str(media.gift)
        
        return {
            "type": "star_gift",
            "source": "media",
            "details": details
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Star Gift –∏–∑ media: {e}")
        return {
            "type": "star_gift",
            "source": "media",
            "details": {"gift_type": "Star Gift from Media", "raw_data": str(media)}
        }

async def extract_star_gift_from_service(service, service_type):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Star Gift –∏–∑ service –ø–æ–ª—è"""
    try:
        details = {
            "gift_type": "Star Gift from Service",
            "service_type": service_type,
            "raw_data": str(service)
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        for attr in dir(service):
            if not attr.startswith('_'):
                try:
                    value = getattr(service, attr)
                    if not callable(value):
                        details[attr] = str(value)
                except:
                    pass
        
        return {
            "type": "star_gift",
            "source": "service",
            "details": details
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Star Gift –∏–∑ service: {e}")
        return {
            "type": "star_gift",
            "source": "service", 
            "details": {"gift_type": "Star Gift from Service", "raw_data": str(service)}
        }

async def extract_gift_from_document(document, attribute):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    return {
        "gift_type": "Gift from Document",
        "document_id": getattr(document, 'id', 'unknown'),
        "attribute_type": str(type(attribute).__name__),
        "attribute_data": str(attribute)
    }

async def extract_star_gift_info(service):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Star Gift"""
    try:
        details = {
            "gift_type": "Star Gift",
            "raw_data": str(service)
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
        if hasattr(service, 'gift'):
            gift = service.gift
            if hasattr(gift, 'stars'):
                details["stars"] = gift.stars
            if hasattr(gift, 'id'):
                details["gift_id"] = gift.id
            if hasattr(gift, 'limited'):
                details["limited"] = gift.limited
            if hasattr(gift, 'sold_out'):
                details["sold_out"] = gift.sold_out
                
        return details
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Star Gift info: {e}")
        return {"gift_type": "Star Gift", "raw_data": str(service)}

# –£–¥–∞–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤ - —Ñ–æ–∫—É—Å —Ç–æ–ª—å–∫–æ –Ω–∞ Star Gifts

async def send_gift_response(client, original_message, gift_info):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ STAR GIFT"""
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è Star Gift
        response_text = f"""‚≠ê <b>STAR GIFT –ü–û–õ–£–ß–ï–ù!</b>

üéÅ <b>–¢–∏–ø:</b> {gift_info['details']['gift_type']}
‚≠ê <b>–ó–≤–µ–∑–¥—ã:</b> {gift_info['details'].get('stars', 'N/A')}
üÜî <b>ID –ø–æ–¥–∞—Ä–∫–∞:</b> {gift_info['details'].get('gift_id', 'N/A')}
üèÜ <b>–õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π:</b> {gift_info['details'].get('limited', 'N/A')}
üìä <b>–†–∞—Å–ø—Ä–æ–¥–∞–Ω:</b> {gift_info['details'].get('sold_out', 'N/A')}
üÜî <b>ID —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {original_message.message_id}
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}
üìù <b>Service Type:</b> {gift_info['service_type']}

üåü <b>–°–ü–ê–°–ò–ë–û –ó–ê STAR GIFT!</b> üåü

<i>–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</i>
<code>{gift_info['details'].get('raw_data', 'N/A')[:500]}</code>"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if original_message.from_user:
            try:
                await client.send_message(
                    chat_id=original_message.from_user.id,
                    text=response_text,
                    parse_mode="HTML"
                )
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –æ STAR GIFT –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {original_message.from_user.id}")
            except Exception as dm_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°: {dm_error}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç
                if original_message.chat:
                    await client.send_message(
                        chat_id=original_message.chat.id,
                        text=response_text,
                        parse_mode="HTML",
                        reply_to_message_id=original_message.message_id
                    )
                    logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –æ STAR GIFT –≤ —á–∞—Ç {original_message.chat.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

class TelegramConfig(BaseModel):
    api_id: str
    api_hash: str
    phone_number: str

@app.get("/", response_class=HTMLResponse)
async def index():
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Telegram Gift Detector</title>
        <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }
        .form-group { margin: 15px 0; }
        .form-group label { display: block; margin-bottom: 5px; font-weight: bold; }
        .form-group input { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
        .btn { padding: 10px 20px; margin: 5px; border: none; border-radius: 5px; cursor: pointer; background: #007bff; color: white; }
        .btn:hover { background: #0056b3; }
        .danger { background: #dc3545; }
        .danger:hover { background: #c82333; }
        #auth-fields { background: #f0f8ff; border: 2px solid #007bff; border-radius: 10px; padding: 20px; margin: 20px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üéÅ Telegram Gift Detector</h1>
            
            <div class="form-group">
                <label>API ID:</label>
                <input type="text" id="api_id" placeholder="–í–∞—à API ID">
            </div>
            <div class="form-group">
                <label>API Hash:</label>
                <input type="text" id="api_hash" placeholder="–í–∞—à API Hash">
            </div>
            <div class="form-group">
                <label>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</label>
                <input type="text" id="phone_number" placeholder="+7XXXXXXXXXX">
            </div>
            
            <div id="auth-fields">
                <h3>üì± –ü–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</h3>
                <div class="form-group">
                    <label>SMS –∫–æ–¥:</label>
                    <input type="text" id="sms_code" placeholder="12345" maxlength="5">
                    <small>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS</small>
                </div>
                <div class="form-group">
                    <label>–ü–∞—Ä–æ–ª—å 2FA (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω):</label>
                    <input type="password" id="two_fa_password" placeholder="–í–∞—à –ø–∞—Ä–æ–ª—å 2FA">
                    <small>–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ 2FA –Ω–µ –≤–∫–ª—é—á–µ–Ω</small>
                </div>
                <button class="btn" onclick="completeAuth()">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</button>
            </div>
            
            <button class="btn" onclick="startDetector()">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä</button>
            <button class="btn danger" onclick="stopDetector()">‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä</button>
            
            <div style="margin-top: 20px;">
                <h3>–°—Ç–∞—Ç—É—Å: <span id="status">–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</span></h3>
                <p>–ü–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: <span id="gifts-count">0</span></p>
            </div>
        </div>

        <script>
        function startDetector() {
            const config = {
                api_id: document.getElementById('api_id').value,
                api_hash: document.getElementById('api_hash').value,
                phone_number: document.getElementById('phone_number').value
            };
            
            if (!config.api_id || !config.api_hash || !config.phone_number) {
                alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
                return;
            }
            
            fetch('/detector/start', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(config)
            })
            .then(response => response.json())
            .then(data => {
                alert('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ' + data.message);
                console.log('–î–∞–Ω–Ω—ã–µ:', data);
            })
            .catch(error => {
                alert('–û—à–∏–±–∫–∞: ' + error.message);
                console.error('–û—à–∏–±–∫–∞:', error);
            });
        }
        
        function completeAuth() {
            const authData = {
                sms_code: document.getElementById('sms_code').value,
                password: document.getElementById('two_fa_password').value
            };
            
            if (!authData.sms_code) {
                alert('–í–≤–µ–¥–∏—Ç–µ SMS –∫–æ–¥!');
                return;
            }
            
            fetch('/detector/complete_auth', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(authData)
            })
            .then(response => response.json())
            .then(data => {
                alert('–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + data.message);
                console.log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', data);
            })
            .catch(error => {
                alert('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + error.message);
                console.error('–û—à–∏–±–∫–∞:', error);
            });
        }
        
        function stopDetector() {
            fetch('/detector/stop', {method: 'POST'})
            .then(response => response.json())
            .then(data => alert(data.message))
            .catch(error => alert('–û—à–∏–±–∫–∞: ' + error.message));
        }
        
        function refreshStatus() {
            fetch('/detector/status')
            .then(response => response.json())
            .then(data => {
                document.getElementById('status').textContent = data.status;
                document.getElementById('gifts-count').textContent = data.gifts_found || 0;
            })
            .catch(error => console.error('Error:', error));
        }
        
        setInterval(refreshStatus, 5000);
        refreshStatus();
        </script>
    </body>
    </html>
    """

@app.get("/detector/status")
async def get_status():
    return detector_status

@app.post("/detector/start")
async def start_detector(config: TelegramConfig):
    if detector_status["running"]:
        raise HTTPException(status_code=400, detail="–î–µ—Ç–µ–∫—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not config.api_id or not config.api_hash or not config.phone_number:
        raise HTTPException(status_code=400, detail="–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    if not config.api_id.isdigit():
        raise HTTPException(status_code=400, detail="API ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
        
    if len(config.api_hash) < 32:
        raise HTTPException(status_code=400, detail="API Hash —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 32+ —Å–∏–º–≤–æ–ª–æ–≤)")
        
    if not config.phone_number.startswith('+'):
        raise HTTPException(status_code=400, detail="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +")
        
    logger.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: API ID –¥–ª–∏–Ω–∞={len(config.api_id)}, API Hash –¥–ª–∏–Ω–∞={len(config.api_hash)}, Phone={config.phone_number}")
    
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        try:
            from pyrogram import Client
            from pyrogram.errors import SessionPasswordNeeded
            logger.info("Pyrogram –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except ImportError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Pyrogram: {e}")
            raise HTTPException(status_code=500, detail=f"Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {str(e)}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–π
        import os
        import tempfile
        
        sessions_dir = os.path.join(tempfile.gettempdir(), "telegram_sessions")
        if not os.path.exists(sessions_dir):
            os.makedirs(sessions_dir, mode=0o755)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ —Å–µ—Å—Å–∏–π: {sessions_dir}")
        
        session_name = f"gift_detector_{config.phone_number.replace('+', '').replace(' ', '')}"
        session_file = os.path.join(sessions_dir, session_name)
        logger.info(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏
        try:
            test_file = os.path.join(sessions_dir, "test_write")
            with open(test_file, 'w') as f:
                f.write("test")
            os.remove(test_file)
            logger.info("–ü—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏: {e}")
            session_file = ":memory:"
            sessions_dir = None
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –≤ –ø–∞–º—è—Ç–∏")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        logger.info("–°–æ–∑–¥–∞–µ–º Pyrogram –∫–ª–∏–µ–Ω—Ç...")
        if session_file == ":memory:":
            client = Client(
                name=session_name,
                api_id=int(config.api_id),
                api_hash=config.api_hash,
                phone_number=config.phone_number,
                in_memory=True
            )
        else:
            client = Client(
                name=session_file,
                api_id=int(config.api_id),
                api_hash=config.api_hash,
                phone_number=config.phone_number,
                workdir=sessions_dir
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ auth_session
        auth_session["client"] = client
        auth_session["config"] = config
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        logger.info("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
        await client.connect()
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        try:
            me = await client.get_me()
            if me:
                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –¥–µ–π—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è {me.first_name}")
                auth_session["awaiting_sms"] = False
                detector_status["running"] = True
                detector_status["status"] = "–ê–∫—Ç–∏–≤–µ–Ω"
                detector_status["start_time"] = datetime.now()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å—Ä–∞–∑—É
                await start_gift_detector(client)
                
                return {"message": "–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞, –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω!", "status": "success"}
        except Exception as e:
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –∫–æ–¥ –Ω–∞ {config.phone_number}...")
        sent_code = await client.send_code(config.phone_number)
        
        auth_session["awaiting_sms"] = True
        auth_session["sent_code"] = sent_code
        auth_session["phone_number"] = config.phone_number
        
        logger.info(f"SMS –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {config.phone_number}")
        return {
            "message": f"SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {config.phone_number}. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ.", 
            "status": "sms_required"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        if auth_session.get("client"):
            try:
                await auth_session["client"].disconnect()
            except:
                pass
            auth_session["client"] = None
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.post("/detector/complete_auth")
async def complete_auth(auth_data: dict):
    if not auth_session.get("client"):
        raise HTTPException(status_code=400, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä'")
        
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    try:
        from pyrogram.errors import SessionPasswordNeeded, BadRequest
        
        client = auth_session["client"]
        sms_code = auth_data.get("sms_code")
        password = auth_data.get("password", "")
        
        if not sms_code:
            raise HTTPException(status_code=400, detail="SMS –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å SMS –∫–æ–¥–æ–º: {sms_code}")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å SMS –∫–æ–¥–æ–º (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
            await client.sign_in(auth_session["config"].phone_number, auth_session["sent_code"].phone_code_hash, sms_code)
            logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ SMS —É—Å–ø–µ—à–Ω–∞!")
            
        except SessionPasswordNeeded:
            logger.info("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA")
            if not password:
                return {
                    "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.", 
                    "status": "password_required"
                }
            
            await client.check_password(password)
            logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ 2FA —É—Å–ø–µ—à–Ω–∞!")
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
        auth_session["awaiting_sms"] = False
        detector_status["running"] = True
        detector_status["status"] = "–ê–∫—Ç–∏–≤–µ–Ω"
        detector_status["start_time"] = datetime.now()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        await start_gift_detector(client)
        
        logger.info("–î–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return {
            "message": "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.", 
            "status": "success"
        }
        
    except BadRequest as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π SMS –∫–æ–¥: {e}")
        return {
            "message": f"–ù–µ–≤–µ—Ä–Ω—ã–π SMS –∫–æ–¥: {str(e)}", 
            "status": "error"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return {
            "message": f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", 
            "status": "error"
        }

@app.post("/detector/stop")
async def stop_detector():
    return {"message": "–î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}