from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import asyncio
import json
import logging
from datetime import datetime
from typing import Optional, Dict, List
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="üéÅ Telegram Gift Detector",
    description="Professional gift detection service for Telegram",
    version="1.0.0"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
detector_status = {
    "running": False,
    "started_at": None,
    "gifts_detected": 0,
    "last_gift": None,
    "error": None
}

gift_history = []

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
auth_session = {
    "client": None,
    "config": None,
    "awaiting_sms": False,
    "awaiting_password": False
}

class TelegramConfig(BaseModel):
    api_id: str
    api_hash: str
    phone_number: str
    session_name: Optional[str] = "gift_detector"

@app.get("/", response_class=HTMLResponse)
def read_root():
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>üéÅ Telegram Gift Detector</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }
        .container { max-width: 800px; margin: 0 auto; background: white; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); overflow: hidden; }
        .header { background: linear-gradient(135deg, #ff6b6b, #ee5a24); color: white; padding: 30px; text-align: center; }
        .content { padding: 30px; }
        .status-card { background: #f8f9fa; border-radius: 10px; padding: 20px; margin: 20px 0; border-left: 4px solid #28a745; }
        .status-card.inactive { border-left-color: #dc3545; }
        .btn { background: #007bff; color: white; border: none; padding: 12px 24px; border-radius: 6px; cursor: pointer; font-size: 16px; margin: 5px; transition: all 0.3s; }
        .btn:hover { background: #0056b3; transform: translateY(-2px); }
        .btn.danger { background: #dc3545; }
        .btn.danger:hover { background: #c82333; }
        .config-form { background: #f8f9fa; padding: 20px; border-radius: 10px; margin: 20px 0; }
        .form-group { margin: 15px 0; }
        .form-group label { display: block; margin-bottom: 5px; font-weight: bold; }
        .form-group input { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px; font-size: 16px; }
        .form-group small { display: block; margin-top: 5px; color: #666; font-size: 12px; }
        #auth-fields { background: #f0f8ff; border: 2px solid #007bff; border-radius: 10px; padding: 20px; margin: 20px 0; }
        .btn:disabled { background: #ccc; cursor: not-allowed; }
        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
        .stat-card { background: white; border: 1px solid #eee; border-radius: 10px; padding: 20px; text-align: center; }
        .stat-number { font-size: 2em; font-weight: bold; color: #007bff; }
        .gift-history { max-height: 300px; overflow-y: auto; background: #f8f9fa; border-radius: 10px; padding: 15px; }
        .gift-item { background: white; margin: 10px 0; padding: 15px; border-radius: 8px; border-left: 4px solid #28a745; }
        </style>
        <script>
        function refreshStatus() {
            fetch('/detector/status')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('status-info').innerHTML = 
                        '<strong>–°—Ç–∞—Ç—É—Å:</strong> ' + (data.running ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') + '<br>' +
                        '<strong>–ü–æ–¥–∞—Ä–∫–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ:</strong> ' + data.gifts_detected + '<br>' +
                        (data.started_at ? '<strong>–ó–∞–ø—É—â–µ–Ω:</strong> ' + new Date(data.started_at).toLocaleString() : '') +
                        (data.error ? '<br><strong>–û—à–∏–±–∫–∞:</strong> ' + data.error : '');
                    
                    document.getElementById('status-card').className = 'status-card ' + (data.running ? '' : 'inactive');
                });
        }
        
        function startDetector() {
            const config = {
                api_id: document.getElementById('api_id').value,
                api_hash: document.getElementById('api_hash').value,
                phone_number: document.getElementById('phone_number').value
            };
            
            if (!config.api_id || !config.api_hash || !config.phone_number) {
                alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
                return;
            }
            
            document.getElementById('start-btn').disabled = true;
            document.getElementById('start-btn').textContent = '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ SMS...';
            
            fetch('/detector/start', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(config)
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(`HTTP ${response.status}: ${text}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
                
                if (data.status === 'sms_required') {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
                    
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è
                    const authFields = document.getElementById('auth-fields');
                    console.log('–≠–ª–µ–º–µ–Ω—Ç auth-fields –Ω–∞–π–¥–µ–Ω:', authFields !== null);
                    
                    if (authFields) {
                        authFields.style.display = 'block';
                        authFields.style.visibility = 'visible';
                        console.log('–ü–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞–Ω—ã, display:', authFields.style.display);
                    } else {
                        console.error('–≠–ª–µ–º–µ–Ω—Ç auth-fields –ù–ï –ù–ê–ô–î–ï–ù!');
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    const authStatus = document.getElementById('auth-status');
                    if (authStatus) authStatus.textContent = '–ø–æ–∫–∞–∑–∞–Ω—ã';
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∞
                    const resendBtn = document.getElementById('resend-btn');
                    if (resendBtn) resendBtn.style.display = 'inline-block';
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞
                    document.getElementById('start-btn').textContent = 'üì± SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω';
                    document.getElementById('start-btn').disabled = false;
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    let alertMsg = 'SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã –Ω–∏–∂–µ.';
                    if (data.debug_info) {
                        alertMsg += '\n\n–û—Ç–ª–∞–¥–∫–∞: ' + data.debug_info;
                    }
                    alert(alertMsg);
                } else if (data.status === 'success') {
                    alert(data.message);
                    document.getElementById('start-btn').disabled = false;
                    document.getElementById('start-btn').textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä';
                } else {
                    alert(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ' + data.status);
                    document.getElementById('start-btn').disabled = false;
                    document.getElementById('start-btn').textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä';
                }
                refreshStatus();
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
                alert('–û—à–∏–±–∫–∞: ' + error.message);
                document.getElementById('start-btn').disabled = false;
                document.getElementById('start-btn').textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä';
            });
        }
        
        function completeAuth() {
            const sms_code = document.getElementById('sms_code').value;
            const password = document.getElementById('two_fa_password').value;
            
            if (!sms_code) {
                alert('–í–≤–µ–¥–∏—Ç–µ SMS –∫–æ–¥!');
                return;
            }
            
            fetch('/detector/complete_auth', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    sms_code: sms_code,
                    password: password
                })
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(`HTTP ${response.status}: ${text}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.status === 'success') {
                    alert('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω.');
                    document.getElementById('auth-fields').style.display = 'none';
                    document.getElementById('auth-status').textContent = '—Å–∫—Ä—ã—Ç—ã';
                    document.getElementById('start-btn').disabled = false;
                    document.getElementById('start-btn').textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä';
                } else {
                    alert('‚ùå ' + (data.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'));
                }
                refreshStatus();
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
                alert('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + error.message);
            });
        }
        
        function stopDetector() {
            fetch('/detector/stop', {method: 'POST'})
            .then(response => response.json())
            .then(data => {
                alert(data.message);
                refreshStatus();
            });
        }
        
        function loadSessions() {
            fetch('/detector/sessions')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    const sessionsList = document.getElementById('sessions-list');
                    if (data.sessions.length === 0) {
                        sessionsList.innerHTML = '<p>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ—Ç</p>';
                        return;
                    }
                    
                    let html = '<div style="background: #f8f9fa; padding: 15px; border-radius: 8px;">';
                    html += '<h4>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:</h4>';
                    
                    data.sessions.forEach(session => {
                        const date = new Date(session.modified).toLocaleString();
                        html += `
                            <div style="background: white; margin: 10px 0; padding: 15px; border-radius: 6px; border: 1px solid #ddd;">
                                <strong>üì± ${session.phone}</strong><br>
                                <small>–†–∞–∑–º–µ—Ä: ${(session.size / 1024).toFixed(1)} KB | –ò–∑–º–µ–Ω–µ–Ω–æ: ${date}</small><br>
                                <button class="btn danger" style="margin-top: 10px; font-size: 12px; padding: 5px 10px;" 
                                        onclick="deleteSession('${session.name}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                            </div>
                        `;
                    });
                    
                    html += '</div>';
                    sessionsList.innerHTML = html;
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π:', error);
                    document.getElementById('sessions-list').innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π: ' + error.message + '</p>';
                });
        }
        
        function deleteSession(sessionName) {
            if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å–µ—Å—Å–∏—é? –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.')) {
                return;
            }
            
            fetch(`/detector/sessions/${sessionName}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(`HTTP ${response.status}: ${text}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                alert(data.message);
                loadSessions(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
                alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: ' + error.message);
            });
        }
        
        function showAuthFields() {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            
            const authFields = document.getElementById('auth-fields');
            console.log('showAuthFields: –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:', authFields !== null);
            
            if (authFields) {
                authFields.style.display = 'block';
                authFields.style.visibility = 'visible';
                authFields.style.opacity = '1';
                console.log('showAuthFields: –°—Ç–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, display:', authFields.style.display);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                console.log('showAuthFields: HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', authFields.innerHTML.length > 0 ? '–µ—Å—Ç—å' : '–ø—É—Å—Ç–æ–µ');
            } else {
                console.error('showAuthFields: –≠–ª–µ–º–µ–Ω—Ç auth-fields –ù–ï –ù–ê–ô–î–ï–ù!');
            }
            
            const authStatus = document.getElementById('auth-status');
            if (authStatus) authStatus.textContent = '–ø–æ–∫–∞–∑–∞–Ω—ã (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)';
            
            const resendBtn = document.getElementById('resend-btn');
            if (resendBtn) resendBtn.style.display = 'inline-block';
            
            alert('–ü–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.');
        }
        
                 function resendSMS() {
             // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ SMS
             const config = {
                 api_id: document.getElementById('api_id').value,
                 api_hash: document.getElementById('api_hash').value,
                 phone_number: document.getElementById('phone_number').value
             };
             
             if (!config.api_id || !config.api_hash || !config.phone_number) {
                 alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS!');
                 return;
             }
             
             document.getElementById('resend-btn').disabled = true;
             document.getElementById('resend-btn').textContent = '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...';
             
             fetch('/detector/start', {
                 method: 'POST',
                 headers: {'Content-Type': 'application/json'},
                 body: JSON.stringify(config)
             })
             .then(response => {
                 if (!response.ok) {
                     return response.text().then(text => {
                         throw new Error(`HTTP ${response.status}: ${text}`);
                     });
                 }
                 return response.json();
             })
             .then(data => {
                 console.log('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ SMS:', data);
                 alert('SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω.');
                 document.getElementById('resend-btn').disabled = false;
                 document.getElementById('resend-btn').textContent = 'üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS –ø–æ–≤—Ç–æ—Ä–Ω–æ';
             })
             .catch(error => {
                 console.error('–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error);
                 alert('–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: ' + error.message);
                 document.getElementById('resend-btn').disabled = false;
                 document.getElementById('resend-btn').textContent = 'üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS –ø–æ–≤—Ç–æ—Ä–Ω–æ';
             });
         }
         
         function checkAuthStatus() {
             // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
             fetch('/detector/auth_status')
             .then(response => response.json())
             .then(data => {
                 console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', data);
                 let message = 'üîç –°–û–°–¢–û–Ø–ù–ò–ï –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:\n\n';
                 message += `üì± –û–∂–∏–¥–∞–Ω–∏–µ SMS: ${data.awaiting_sms ? '–î–ê' : '–ù–ï–¢'}\n`;
                 message += `üîó –ï—Å—Ç—å –∫–ª–∏–µ–Ω—Ç: ${data.has_client ? '–î–ê' : '–ù–ï–¢'}\n`;
                 message += `‚öôÔ∏è –ï—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥: ${data.has_config ? '–î–ê' : '–ù–ï–¢'}\n`;
                 message += `üì® –ï—Å—Ç—å sent_code: ${data.has_sent_code ? '–î–ê' : '–ù–ï–¢'}\n`;
                 message += `üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${data.phone_number}\n\n`;
                 message += `–ö–ª—é—á–∏ –≤ auth_session: ${data.auth_session_keys.join(', ')}`;
                 
                 alert(message);
             })
             .catch(error => {
                 console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
                 alert('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ' + error.message);
             });
         }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        function debugElements() {
            console.log('=== –û–¢–õ–ê–î–ö–ê –≠–õ–ï–ú–ï–ù–¢–û–í ===');
            console.log('auth-fields:', document.getElementById('auth-fields'));
            console.log('auth-status:', document.getElementById('auth-status'));
            console.log('sms_code:', document.getElementById('sms_code'));
            console.log('two_fa_password:', document.getElementById('two_fa_password'));
            console.log('start-btn:', document.getElementById('start-btn'));
            console.log('resend-btn:', document.getElementById('resend-btn'));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ div –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const allDivs = document.querySelectorAll('div');
            console.log('–í—Å–µ–≥–æ div —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', allDivs.length);
            
            const authFieldsAll = document.querySelectorAll('[id*="auth"]');
            console.log('–≠–ª–µ–º–µ–Ω—Ç—ã —Å "auth" –≤ id:', authFieldsAll);
        }
        
        // –í—ã–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        window.onload = function() {
            refreshStatus();
            debugElements();
            console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
        };
        
        setInterval(refreshStatus, 5000);
        </script>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üéÅ Telegram Gift Detector</h1>
                <p>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ Telegram</p>
            </div>
            
            <div class="content">
                <div id="status-card" class="status-card">
                    <h3>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
                    <div id="status-info">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                </div>
                
                <div class="config-form">
                    <h3>‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram</h3>
                    <div id="debug-info" style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; margin: 10px 0; border-radius: 5px; font-size: 12px;">
                        <strong>–û—Ç–ª–∞–¥–∫–∞:</strong> –ü–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ <span id="auth-status">—Å–∫—Ä—ã—Ç—ã</span>
                    </div>
                    <div class="form-group">
                        <label>API ID:</label>
                        <input type="text" id="api_id" placeholder="–í–∞—à API ID">
                    </div>
                    <div class="form-group">
                        <label>API Hash:</label>
                        <input type="text" id="api_hash" placeholder="–í–∞—à API Hash">
                    </div>
                    <div class="form-group">
                        <label>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</label>
                        <input type="text" id="phone_number" placeholder="+7XXXXXXXXXX">
                    </div>
                    
                    <!-- –ü–æ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ -->
                    <div id="auth-fields" style="display: none;">
                        <div class="form-group">
                            <label>SMS –∫–æ–¥:</label>
                            <input type="text" id="sms_code" placeholder="12345" maxlength="5">
                            <small>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS</small>
                        </div>
                        <div class="form-group">
                            <label>–ü–∞—Ä–æ–ª—å 2FA (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω):</label>
                            <input type="password" id="two_fa_password" placeholder="–í–∞—à –ø–∞—Ä–æ–ª—å 2FA">
                            <small>–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ 2FA –Ω–µ –≤–∫–ª—é—á–µ–Ω</small>
                        </div>
                        <button class="btn" onclick="completeAuth()">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</button>
                    </div>
                    
                    <button class="btn" onclick="startDetector()" id="start-btn">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä</button>
                    <button class="btn danger" onclick="stopDetector()">‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä</button>
                    <button class="btn" onclick="showAuthFields()" style="background: #ffc107; color: #000;">üì± –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</button>
                    <button class="btn" onclick="resendSMS()" id="resend-btn" style="background: #28a745; display: none;">üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS –ø–æ–≤—Ç–æ—Ä–Ω–æ</button>
                </div>
                
                <div class="stats">
                    <div class="stat-card">
                        <div class="stat-number" id="gifts-count">0</div>
                        <div>–ü–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="uptime">0</div>
                        <div>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</div>
                    </div>
                </div>
                
                <div>
                    <h3>üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏</h3>
                    <div class="config-form">
                        <button class="btn" onclick="loadSessions()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π</button>
                        <div id="sessions-list" style="margin-top: 15px;">
                            <p>–ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</p>
                        </div>
                    </div>
                </div>
                
                <div>
                    <h3>üìù –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤</h3>
                    <div class="gift-history" id="gift-history">
                        <p>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...</p>
                    </div>
                </div>
            </div>
        </div>
    </body>
    </html>
    """
    return html_content

@app.get("/health")
def health_check():
    return {
        "status": "healthy", 
        "service": "Telegram Gift Detector",
        "uptime": "running"
    }

@app.get("/info")
def get_info():
    return {
        "name": "Telegram Gift Detector",
        "version": "1.0.0",
        "description": "Smart Telegram gift detection service",
        "status": "ready for deployment",
        "endpoints": {
            "root": "/",
            "health": "/health",
            "info": "/info",
            "docs": "/docs"
        }
    }

@app.get("/status")
def get_status():
    return {
        "service": "online",
        "deployment": "successful",
        "ready": True
    }

@app.get("/detector/status")
def get_detector_status():
    return detector_status

@app.post("/detector/start")
async def start_detector(config: TelegramConfig):
    if detector_status["running"]:
        raise HTTPException(status_code=400, detail="–î–µ—Ç–µ–∫—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not config.api_id or not config.api_hash or not config.phone_number:
        raise HTTPException(status_code=400, detail="–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    if not config.api_id.isdigit():
        raise HTTPException(status_code=400, detail="API ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
        
    if len(config.api_hash) < 32:
        raise HTTPException(status_code=400, detail="API Hash —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 32+ —Å–∏–º–≤–æ–ª–æ–≤)")
        
    if not config.phone_number.startswith('+'):
        raise HTTPException(status_code=400, detail="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +")
        
    # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: API ID –¥–ª–∏–Ω–∞={len(config.api_id)}, API Hash –¥–ª–∏–Ω–∞={len(config.api_hash)}, Phone={config.phone_number}")
    
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        logger.info(f"API ID: {config.api_id}, Phone: {config.phone_number}")
        
        try:
            from pyrogram import Client
            from pyrogram.errors import SessionPasswordNeeded
            logger.info("Pyrogram –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except ImportError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Pyrogram: {e}")
            raise HTTPException(status_code=500, detail=f"Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {str(e)}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
        import os
        import tempfile
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É —Å –ø—Ä–∞–≤–∞–º–∏ –∑–∞–ø–∏—Å–∏
        sessions_dir = os.path.join(tempfile.gettempdir(), "telegram_sessions")
        if not os.path.exists(sessions_dir):
            os.makedirs(sessions_dir, mode=0o755)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ —Å–µ—Å—Å–∏–π: {sessions_dir}")
        
        # –ò–º—è —Å–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        session_name = f"gift_detector_{config.phone_number.replace('+', '').replace(' ', '')}"
        session_file = os.path.join(sessions_dir, session_name)
        logger.info(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏
        try:
            test_file = os.path.join(sessions_dir, "test_write")
            with open(test_file, 'w') as f:
                f.write("test")
            os.remove(test_file)
            logger.info("–ü—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏ –≤ –ø–∞–ø–∫—É —Å–µ—Å—Å–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ –ø–∞–ø–∫—É —Å–µ—Å—Å–∏–π: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å –¥–ª—è —Å–µ—Å—Å–∏–∏
            session_file = ":memory:"
            sessions_dir = None
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –≤ –ø–∞–º—è—Ç–∏")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
        logger.info("–°–æ–∑–¥–∞–µ–º Pyrogram –∫–ª–∏–µ–Ω—Ç...")
        try:
            if session_file == ":memory:":
                # –°–µ—Å—Å–∏—è –≤ –ø–∞–º—è—Ç–∏
                client = Client(
                    name=session_name,
                    api_id=int(config.api_id),
                    api_hash=config.api_hash,
                    phone_number=config.phone_number,
                    in_memory=True
                )
                logger.info("Pyrogram –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å —Å–µ—Å—Å–∏–µ–π –≤ –ø–∞–º—è—Ç–∏")
            else:
                # –°–µ—Å—Å–∏—è –≤ —Ñ–∞–π–ª–µ
                client = Client(
                    name=session_file,
                    api_id=int(config.api_id),
                    api_hash=config.api_hash,
                    phone_number=config.phone_number,
                    workdir=sessions_dir
                )
                logger.info("Pyrogram –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Pyrogram –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
        auth_session["client"] = client
        auth_session["config"] = config
        logger.info("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ auth_session")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        logger.info("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
        try:
            await client.connect()
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
            logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API...")
            try:
                # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram DC
                dc_info = await client.get_me()  # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –ø–æ–∫–∞–∂–µ—Ç —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç
            except Exception as dc_error:
                logger.info(f"–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ): {dc_error}")
                logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
            error_str = str(e).lower()
            if "network" in error_str or "connection" in error_str:
                raise Exception(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é: {str(e)}")
            elif "api" in error_str:
                raise Exception(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å API –¥–∞–Ω–Ω—ã–º–∏: {str(e)}")
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ (–µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è)
        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
        try:
            me = await client.get_me()
            if me:
                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –¥–µ–π—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è {me.first_name}")
                # –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
                auth_session["awaiting_sms"] = False
                username = f"@{me.username}" if me.username else "–±–µ–∑ username"
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è {me.first_name} ({username})")
                return await _start_detector_after_auth()
        except Exception as e:
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: {e}")
        
        # –ù—É–∂–Ω–∞ –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –∫–æ–¥ –Ω–∞ {config.phone_number}...")
        logger.info(f"API ID: {config.api_id}, API Hash: {config.api_hash[:10]}...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π SMS
            logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...")
            
            sent_code = await client.send_code(config.phone_number)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ auth_session
            auth_session["awaiting_sms"] = True
            auth_session["sent_code"] = sent_code
            auth_session["phone_number"] = config.phone_number
            
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ auth_session –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:")
            logger.info(f"awaiting_sms: {auth_session['awaiting_sms']}")
            logger.info(f"client: {auth_session['client'] is not None}")
            logger.info(f"config: {auth_session['config'] is not None}")
            logger.info(f"sent_code: {auth_session['sent_code'] is not None}")
            logger.info(f"phone_number: {auth_session['phone_number']}")
            
            # –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê sent_code –æ–±—ä–µ–∫—Ç–∞
            logger.info(f"=== –ê–ù–ê–õ–ò–ó –û–¢–ü–†–ê–í–ö–ò SMS ===")
            logger.info(f"–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ sent_code: {type(sent_code)}")
            logger.info(f"–í—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã sent_code: {dir(sent_code)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            if hasattr(sent_code, 'type'):
                logger.info(f"–¢–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏: {sent_code.type}")
                logger.info(f"–¢–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏ (raw): {repr(sent_code.type)}")
            else:
                logger.warning("–£ sent_code –ù–ï–¢ –∞—Ç—Ä–∏–±—É—Ç–∞ 'type'!")
                
            if hasattr(sent_code, 'phone_code_hash'):
                logger.info(f"Phone code hash: {sent_code.phone_code_hash}")
                if len(sent_code.phone_code_hash) > 0:
                    logger.info("‚úÖ Phone code hash –Ω–µ –ø—É—Å—Ç–æ–π - SMS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                else:
                    logger.error("‚ùå Phone code hash –ü–£–°–¢–û–ô - SMS –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                logger.error("‚ùå –£ sent_code –ù–ï–¢ –∞—Ç—Ä–∏–±—É—Ç–∞ 'phone_code_hash'!")
                
            if hasattr(sent_code, 'timeout'):
                logger.info(f"–¢–∞–π–º–∞—É—Ç: {sent_code.timeout} —Å–µ–∫—É–Ω–¥")
            if hasattr(sent_code, 'next_type'):
                logger.info(f"–°–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø: {sent_code.next_type}")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SMS —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            sms_sent = False
            if hasattr(sent_code, 'phone_code_hash') and sent_code.phone_code_hash:
                sms_sent = True
                logger.info("‚úÖ SMS –ö–û–î –û–¢–ü–†–ê–í–õ–ï–ù –£–°–ü–ï–®–ù–û")
            else:
                logger.error("‚ùå SMS –ö–û–î –ù–ï –û–¢–ü–†–ê–í–õ–ï–ù - –ø—Ä–æ–±–ª–µ–º–∞ —Å API –∏–ª–∏ –Ω–æ–º–µ—Ä–æ–º")
                
            # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º sms_required –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞
            # –î–∞–∂–µ –µ—Å–ª–∏ SMS –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é
            return {
                "message": f"SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {config.phone_number}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ.", 
                "status": "sms_required",
                "phone": config.phone_number,
                "code_type": str(sent_code.type) if hasattr(sent_code, 'type') else "unknown",
                "sms_sent": sms_sent,
                "phone_code_hash": bool(hasattr(sent_code, 'phone_code_hash') and sent_code.phone_code_hash),
                "debug_info": f"Phone hash: {'OK' if sms_sent else 'EMPTY'}"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {e}")
            try:
                await client.disconnect()
            except Exception as disconnect_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {disconnect_error}")
            auth_session["client"] = None
            raise Exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {str(e)}")
            
    except ImportError:
        raise HTTPException(status_code=500, detail="Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS: {e}")
        if auth_session["client"]:
            try:
                await auth_session["client"].disconnect()
            except Exception as disconnect_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {disconnect_error}")
            auth_session["client"] = None
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.post("/detector/complete_auth")
async def complete_auth(auth_data: dict):
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    logger.info("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê COMPLETE_AUTH ===")
    logger.info(f"auth_session keys: {list(auth_session.keys())}")
    logger.info(f"awaiting_sms: {auth_session.get('awaiting_sms', '–ù–ï–¢ –ö–õ–Æ–ß–ê')}")
    logger.info(f"client exists: {auth_session.get('client') is not None}")
    logger.info(f"config exists: {auth_session.get('config') is not None}")
    logger.info(f"auth_data: {auth_data}")
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –±—ã–ª –∫–ª–∏–µ–Ω—Ç
    if not auth_session.get("client"):
        logger.error("–ö–ª–∏–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ auth_session")
        raise HTTPException(status_code=400, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä' –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å SMS")
        
    logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
    
    try:
        from pyrogram.errors import SessionPasswordNeeded, BadRequest
        
        client = auth_session["client"]
        sms_code = auth_data.get("sms_code")
        password = auth_data.get("password", "")
        
        if not sms_code:
            raise HTTPException(status_code=400, detail="SMS –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å SMS –∫–æ–¥–æ–º
            await client.sign_in(auth_session["config"].phone_number, sms_code)
            logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ SMS –∫–æ–¥—É —É—Å–ø–µ—à–Ω–∞")
            
        except SessionPasswordNeeded:
            # –ù—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å 2FA
            if not password:
                raise HTTPException(status_code=400, detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA")
            await client.check_password(password)
            logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ 2FA —É—Å–ø–µ—à–Ω–∞")
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        auth_session["awaiting_sms"] = False
        return await _start_detector_after_auth()
        
    except BadRequest as e:
        raise HTTPException(status_code=400, detail=f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –ø–∞—Ä–æ–ª—å: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        if auth_session["client"]:
            await auth_session["client"].disconnect()
            auth_session["client"] = None
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")

async def _start_detector_after_auth():
    """–ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        from telegram_detector import TelegramGiftDetector
        
        detector_status["running"] = True
        detector_status["started_at"] = datetime.now().isoformat()
        detector_status["error"] = None
        detector_status["gifts_detected"] = 0
        
        config = auth_session["config"]
        logger.info(f"–î–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è {config.phone_number}")
        
        # Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
        async def gift_found_callback(gift_info):
            gift_history.append(gift_info)
            detector_status["gifts_detected"] += 1
            detector_status["last_gift"] = gift_info
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–∞—Ä–æ–∫: {gift_info}")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
        detector = TelegramGiftDetector(
            config.api_id,
            config.api_hash, 
            config.phone_number
        )
        detector.client = auth_session["client"]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ (–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è background task)
        # background_tasks.add_task(detector.start, gift_found_callback)
        
        return {"message": "–î–µ—Ç–µ–∫—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!", "status": "success"}
        
    except Exception as e:
        detector_status["error"] = str(e)
        detector_status["running"] = False
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")

@app.post("/detector/stop")
async def stop_detector():
    if not detector_status["running"]:
        raise HTTPException(status_code=400, detail="–î–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    
    try:
        from telegram_detector import stop_telegram_detector
        await stop_telegram_detector()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {e}")
    
    detector_status["running"] = False
    detector_status["started_at"] = None
    detector_status["error"] = None
    
    logger.info("–î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    return {"message": "–î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "status": "stopped"}

@app.get("/detector/history")
def get_gift_history():
    return {"gifts": gift_history}

@app.get("/detector/auth_status")
async def get_auth_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    return {
        "auth_session_keys": list(auth_session.keys()),
        "awaiting_sms": auth_session.get("awaiting_sms", False),
        "has_client": auth_session.get("client") is not None,
        "has_config": auth_session.get("config") is not None,
        "has_sent_code": auth_session.get("sent_code") is not None,
        "phone_number": auth_session.get("phone_number", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    }

@app.get("/detector/sessions")
def get_saved_sessions():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    import os
    import tempfile
    from datetime import datetime
    
    sessions_dir = os.path.join(tempfile.gettempdir(), "telegram_sessions")
    sessions = []
    
    if os.path.exists(sessions_dir):
        try:
            for file in os.listdir(sessions_dir):
                if file.endswith('.session'):
                    session_name = file.replace('.session', '')
                    file_path = os.path.join(sessions_dir, file)
                    file_size = os.path.getsize(file_path)
                    modified_time = os.path.getmtime(file_path)
                    
                    sessions.append({
                        "name": session_name,
                        "size": file_size,
                        "modified": datetime.fromtimestamp(modified_time).isoformat(),
                        "phone": session_name.replace('gift_detector_', '+').replace('gift_detector', 'unknown')
                    })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")
            return {"sessions": [], "error": str(e)}
    
    return {"sessions": sessions}

@app.delete("/detector/sessions/{session_name}")
def delete_session(session_name: str):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é"""
    import os
    import tempfile
    
    sessions_dir = os.path.join(tempfile.gettempdir(), "telegram_sessions")
    session_file = os.path.join(sessions_dir, f"{session_name}.session")
    
    if os.path.exists(session_file):
        os.remove(session_file)
        logger.info(f"–°–µ—Å—Å–∏—è {session_name} —É–¥–∞–ª–µ–Ω–∞")
        return {"message": f"–°–µ—Å—Å–∏—è {session_name} —É–¥–∞–ª–µ–Ω–∞"}
    else:
        raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

@app.post("/detector/simulate-gift")
async def simulate_gift():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏–º–∏—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞"""
    if not detector_status["running"]:
        raise HTTPException(status_code=400, detail="–î–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞
    fake_gift = {
        "id": f"gift_{len(gift_history) + 1}",
        "type": "Star Gift",
        "price": "2500 stars",
        "quantity": "100/1000",
        "status": "limited",
        "detected_at": datetime.now().isoformat(),
        "sender": "TestUser",
        "chat": "Test Chat"
    }
    
    gift_history.append(fake_gift)
    detector_status["gifts_detected"] += 1
    detector_status["last_gift"] = fake_gift
    
    return {"message": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω", "gift": fake_gift}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)