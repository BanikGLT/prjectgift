"""
Telegram Gift Detector - –†–µ–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞–º–∏
"""

import logging
import asyncio
import json
import re
from datetime import datetime
from typing import Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TelegramGiftDetector:
    def __init__(self, api_id: str, api_hash: str, phone_number: str, session_name: str = "gift_detector"):
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone_number = phone_number
        self.session_name = session_name
        self.client = None
        self.is_running = False
        self.gift_callback = None
        
    async def start(self, gift_callback=None):
        """–ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å —Ä–µ–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
        try:
            # –ò–º–ø–æ—Ä—Ç Pyrogram
            from pyrogram import Client, filters
            from pyrogram.types import Message
            from pyrogram.errors import SessionPasswordNeeded
            
            self.gift_callback = gift_callback
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram
            self.client = Client(
                name=self.session_name,
                api_id=int(self.api_id),
                api_hash=self.api_hash,
                phone_number=self.phone_number
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.client.on_message()
            async def message_handler(client, message: Message):
                await self._process_message(message)
            
            # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –∫–ª–∏–µ–Ω—Ç–∞...")
            await self.client.start()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
            me = await self.client.get_me()
            logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
            
            self.is_running = True
            logger.info("üéÅ Telegram Gift Detector –∑–∞–ø—É—â–µ–Ω! –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø–æ–¥–∞—Ä–∫–∏...")
            
            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            while self.is_running:
                await asyncio.sleep(1)
                
        except ImportError:
            logger.error("‚ùå Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyrogram tgcrypto")
            raise Exception("Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        self.is_running = False
        if self.client:
            await self.client.stop()
        logger.info("Telegram Gift Detector –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _simulate_mode(self):
        """–†–µ–∂–∏–º –∏–º–∏—Ç–∞—Ü–∏–∏ –±–µ–∑ Pyrogram"""
        self.is_running = True
        logger.info("–ó–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –∏–º–∏—Ç–∞—Ü–∏–∏ (Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        counter = 1
        while self.is_running:
            await asyncio.sleep(30)
            if self.is_running and self.gift_callback:
                fake_gift = {
                    "id": f"sim_gift_{counter}",
                    "type": "Simulated Star Gift",
                    "price": f"{1000 + counter * 500} stars",
                    "quantity": f"{100 - counter * 10}/1000",
                    "status": "limited",
                    "detected_at": datetime.now().isoformat(),
                    "sender": f"SimUser{counter}",
                    "chat": "Simulation Chat",
                    "serial_number": f"SIM{counter:06d}",
                    "rarity": "rare" if counter % 3 == 0 else "common"
                }
                await self.gift_callback(fake_gift)
                counter += 1
    
    async def _process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.from_user and message.from_user.is_self:
                return
            
            gift_info = None
            
            # üéÅ –ú–ï–¢–û–î 1: –ü–æ–∏—Å–∫ –≤ service messages (—Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π)
            if message.service:
                gift_info = await self._check_service_message(message)
            
            # üéÅ –ú–ï–¢–û–î 2: –ü–æ–∏—Å–∫ gift stickers –∏ gift buttons
            if not gift_info:
                gift_info = await self._check_gift_stickers(message)
            
            # üéÅ –ú–ï–¢–û–î 3: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not gift_info and message.text:
                gift_info = await self._check_text_content(message)
            
            # üéÅ –ú–ï–¢–û–î 4: –ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if not gift_info:
                gift_info = await self._check_media_content(message)
            
            # –ï—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            if gift_info:
                await self._send_gift_info_to_sender(message, gift_info)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                if self.gift_callback:
                    await self.gift_callback(gift_info)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _check_service_message(self, message) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ service messages –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã service messages
            service_type = str(type(message.service).__name__)
            
            if 'gift' in service_type.lower():
                logger.info(f"üéÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–∞—Ä–æ–∫ –≤ service message: {service_type}")
                
                gift_info = {
                    "id": f"service_{message.id}",
                    "type": "Telegram Gift",
                    "service_type": service_type,
                    "detected_at": datetime.now().isoformat(),
                    "sender": self._get_sender_info(message),
                    "chat": self._get_chat_info(message),
                    "detection_method": "service_message",
                    "message_id": message.id
                }
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if hasattr(message.service, '__dict__'):
                    service_data = message.service.__dict__
                    gift_info.update({
                        "service_data": str(service_data),
                        "price": self._extract_price_from_service(service_data),
                        "quantity": self._extract_quantity_from_service(service_data)
                    })
                
                return gift_info
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ service message: {e}")
        return None
    
    async def _check_gift_stickers(self, message) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–∫–µ—Ä—ã
            if message.sticker:
                sticker_set = message.sticker.set_name
                if sticker_set and ('gift' in sticker_set.lower() or 'star' in sticker_set.lower()):
                    logger.info(f"üéÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω gift sticker: {sticker_set}")
                    return {
                        "id": f"sticker_{message.id}",
                        "type": "Gift Sticker",
                        "sticker_set": sticker_set,
                        "detected_at": datetime.now().isoformat(),
                        "sender": self._get_sender_info(message),
                        "chat": self._get_chat_info(message),
                        "detection_method": "gift_sticker"
                    }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º inline –∫–Ω–æ–ø–∫–∏
            if message.reply_markup and hasattr(message.reply_markup, 'inline_keyboard'):
                for row in message.reply_markup.inline_keyboard:
                    for button in row:
                        if button.text and ('gift' in button.text.lower() or 'üéÅ' in button.text):
                            logger.info(f"üéÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ gift –∫–Ω–æ–ø–∫–∞: {button.text}")
                            return {
                                "id": f"button_{message.id}",
                                "type": "Gift Button",
                                "button_text": button.text,
                                "detected_at": datetime.now().isoformat(),
                                "sender": self._get_sender_info(message),
                                "chat": self._get_chat_info(message),
                                "detection_method": "gift_button"
                            }
                            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤: {e}")
        return None
    
    async def _check_text_content(self, message) -> Optional[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        try:
            text = message.text.lower()
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤
            gift_patterns = [
                r'üéÅ.*gift',
                r'star.*gift',
                r'–ø–æ–¥–∞—Ä–æ–∫.*–∑–≤–µ–∑–¥',
                r'gift.*star',
                r'premium.*gift',
                r'unique.*gift',
                r'limited.*gift',
                r'collect.*gift',
                r'–ø–æ–ª—É—á–∏—Ç—å.*–ø–æ–¥–∞—Ä–æ–∫',
                r'send.*gift',
                r'–æ—Ç–ø—Ä–∞–≤–∏—Ç—å.*–ø–æ–¥–∞—Ä–æ–∫'
            ]
            
            for pattern in gift_patterns:
                if re.search(pattern, text, re.IGNORECASE):
                    logger.info(f"üéÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–∞—Ä–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ: {pattern}")
                    
                    return {
                        "id": f"text_{message.id}",
                        "type": "Text Gift Detection",
                        "pattern_matched": pattern,
                        "price": self._extract_price_from_text(text),
                        "detected_at": datetime.now().isoformat(),
                        "sender": self._get_sender_info(message),
                        "chat": self._get_chat_info(message),
                        "detection_method": "text_analysis",
                        "original_text": message.text[:200] + "..." if len(message.text) > 200 else message.text
                    }
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
        return None
    
    async def _check_media_content(self, message) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            if message.document:
                file_name = message.document.file_name or ""
                if 'gift' in file_name.lower():
                    logger.info(f"üéÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω gift –¥–æ–∫—É–º–µ–Ω—Ç: {file_name}")
                    return {
                        "id": f"doc_{message.id}",
                        "type": "Gift Document",
                        "file_name": file_name,
                        "detected_at": datetime.now().isoformat(),
                        "sender": self._get_sender_info(message),
                        "chat": self._get_chat_info(message),
                        "detection_method": "document_analysis"
                    }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ —Å caption
            if message.photo and message.caption:
                caption = message.caption.lower()
                if any(word in caption for word in ['gift', '–ø–æ–¥–∞—Ä–æ–∫', 'star', 'üéÅ']):
                    logger.info(f"üéÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω gift –≤ photo caption")
                    return {
                        "id": f"photo_{message.id}",
                        "type": "Gift Photo",
                        "caption": message.caption[:100],
                        "detected_at": datetime.now().isoformat(),
                        "sender": self._get_sender_info(message),
                        "chat": self._get_chat_info(message),
                        "detection_method": "photo_caption"
                    }
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞: {e}")
        return None
    
    async def _send_gift_info_to_sender(self, original_message, gift_info):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∞—Ä–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ
            response_text = self._format_gift_response(gift_info)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if original_message.from_user:
                try:
                    await self.client.send_message(
                        chat_id=original_message.from_user.id,
                        text=response_text,
                        parse_mode="HTML"
                    )
                    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {original_message.from_user.username}")
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°, –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°, –æ—Ç–≤–µ—á–∞–µ–º –≤ —á–∞—Ç–µ: {e}")
                    await self.client.send_message(
                        chat_id=original_message.chat.id,
                        text=response_text,
                        reply_to_message_id=original_message.id,
                        parse_mode="HTML"
                    )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    def _format_gift_response(self, gift_info) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–∞—Ä–∫–µ"""
        response = f"""
üéÅ <b>–û–ë–ù–ê–†–£–ñ–ï–ù –ü–û–î–ê–†–û–ö!</b>

üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ ID: <code>{gift_info.get('id', 'N/A')}</code>
‚Ä¢ –¢–∏–ø: {gift_info.get('type', 'Unknown')}
‚Ä¢ –ú–µ—Ç–æ–¥: {gift_info.get('detection_method', 'N/A')}
‚Ä¢ –í—Ä–µ–º—è: {gift_info.get('detected_at', 'N/A')}

üí∞ <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ –¶–µ–Ω–∞: {gift_info.get('price', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {gift_info.get('quantity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {gift_info.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

üìç <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {gift_info.get('sender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –ß–∞—Ç: {gift_info.get('chat', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

ü§ñ <i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ Telegram Gift Detector</i>
        """.strip()
        
        return response
    
    def _get_sender_info(self, message) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ"""
        if not message.from_user:
            return "Unknown"
        
        username = f"@{message.from_user.username}" if message.from_user.username else ""
        first_name = message.from_user.first_name or ""
        last_name = message.from_user.last_name or ""
        full_name = f"{first_name} {last_name}".strip()
        
        return f"{full_name} {username}".strip() or f"ID:{message.from_user.id}"
    
    def _get_chat_info(self, message) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ"""
        if not message.chat:
            return "Unknown"
        
        if message.chat.title:
            return message.chat.title
        elif message.chat.first_name:
            return f"{message.chat.first_name} {message.chat.last_name or ''}".strip()
        else:
            return f"ID:{message.chat.id}"
    
    def _extract_price_from_service(self, service_data) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ service –¥–∞–Ω–Ω—ã—Ö"""
        service_str = str(service_data).lower()
        
        # –ü–æ–∏—Å–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ü–µ–Ω—ã
        patterns = [
            r'star_count["\s]*[:=]["\s]*(\d+)',
            r'price["\s]*[:=]["\s]*(\d+)',
            r'stars["\s]*[:=]["\s]*(\d+)',
            r'(\d+)\s*star'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, service_str)
            if match:
                return f"{match.group(1)} stars"
        
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    def _extract_quantity_from_service(self, service_data) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑ service –¥–∞–Ω–Ω—ã—Ö"""
        service_str = str(service_data).lower()
        
        # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
        patterns = [
            r'remaining["\s]*[:=]["\s]*(\d+).*total["\s]*[:=]["\s]*(\d+)',
            r'(\d+)/(\d+)',
            r'left["\s]*[:=]["\s]*(\d+)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, service_str)
            if match:
                if len(match.groups()) >= 2:
                    return f"{match.group(1)}/{match.group(2)}"
                else:
                    return f"{match.group(1)} left"
        
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    def _extract_price_from_text(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã
        patterns = [
            r'(\d+)\s*(star|–∑–≤–µ–∑–¥|stars|‚≠ê)',
            r'price[:\s]*(\d+)',
            r'—Ü–µ–Ω–∞[:\s]*(\d+)',
            r'—Å—Ç–æ–∏—Ç[:\s]*(\d+)',
            r'costs[:\s]*(\d+)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return f"{match.group(1)} stars"
        
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
_detector_instance = None

async def start_telegram_detector(api_id: str, api_hash: str, phone_number: str, gift_callback=None):
    """–ó–∞–ø—É—Å–∫ Telegram –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    global _detector_instance
    
    if _detector_instance and _detector_instance.is_running:
        raise Exception("–î–µ—Ç–µ–∫—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    
    _detector_instance = TelegramGiftDetector(api_id, api_hash, phone_number)
    await _detector_instance.start(gift_callback)

async def stop_telegram_detector():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    global _detector_instance
    
    if _detector_instance:
        await _detector_instance.stop()
        _detector_instance = None

def is_detector_running() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    global _detector_instance
    return _detector_instance is not None and _detector_instance.is_running