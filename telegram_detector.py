"""
Telegram Gift Detector - –†–µ–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞–º–∏
"""

import logging
import asyncio
import json
import re
from datetime import datetime
from typing import Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TelegramGiftDetector:
    def __init__(self, api_id: str, api_hash: str, phone_number: str, session_name: str = "gift_detector"):
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone_number = phone_number
        self.session_name = session_name
        self.client = None
        self.is_running = False
        self.gift_callback = None
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        import os
        self.sessions_dir = "sessions"
        if not os.path.exists(self.sessions_dir):
            os.makedirs(self.sessions_dir)
        
        # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
        self.session_file = os.path.join(self.sessions_dir, f"{session_name}.session")
        
    async def start(self, gift_callback=None):
        """–ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å —Ä–µ–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
        try:
            # –ò–º–ø–æ—Ä—Ç Pyrogram
            from pyrogram import Client, filters
            from pyrogram.types import Message
            from pyrogram.errors import SessionPasswordNeeded
            
            self.gift_callback = gift_callback
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
            self.client = Client(
                name=self.session_file,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
                api_id=int(self.api_id),
                api_hash=self.api_hash,
                phone_number=self.phone_number,
                workdir=self.sessions_dir  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.client.on_message()
            async def message_handler(client, message: Message):
                await self._process_message(message)
            
            # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –∫–ª–∏–µ–Ω—Ç–∞...")
            await self.client.start()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
            me = await self.client.get_me()
            logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
            
            self.is_running = True
            logger.info("üéÅ Telegram Gift Detector –∑–∞–ø—É—â–µ–Ω! –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø–æ–¥–∞—Ä–∫–∏...")
            
            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            while self.is_running:
                await asyncio.sleep(1)
                
        except ImportError:
            logger.error("‚ùå Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyrogram tgcrypto")
            raise Exception("Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        self.is_running = False
        if self.client:
            await self.client.stop()
        logger.info("Telegram Gift Detector –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _simulate_mode(self):
        """–†–µ–∂–∏–º –∏–º–∏—Ç–∞—Ü–∏–∏ –±–µ–∑ Pyrogram"""
        self.is_running = True
        logger.info("–ó–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –∏–º–∏—Ç–∞—Ü–∏–∏ (Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        counter = 1
        while self.is_running:
            await asyncio.sleep(30)
            if self.is_running and self.gift_callback:
                fake_gift = {
                    "id": f"sim_gift_{counter}",
                    "type": "Simulated Star Gift",
                    "price": f"{1000 + counter * 500} stars",
                    "quantity": f"{100 - counter * 10}/1000",
                    "status": "limited",
                    "detected_at": datetime.now().isoformat(),
                    "sender": f"SimUser{counter}",
                    "chat": "Simulation Chat",
                    "serial_number": f"SIM{counter:06d}",
                    "rarity": "rare" if counter % 3 == 0 else "common"
                }
                await self.gift_callback(fake_gift)
                counter += 1
    
    async def _process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.from_user and message.from_user.is_self:
                return
            
            gift_info = None
            
            # üéÅ –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î: –ü–æ–∏—Å–∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö Telegram Gifts –≤ service messages
            if message.service:
                gift_info = await self._check_service_message(message)
            
            # üéÅ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô: –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            if not gift_info and message.text and len(message.text) < 500:
                gift_info = await self._check_gift_mentions(message)
            
            # –ï—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            if gift_info:
                await self._send_gift_info_to_sender(message, gift_info)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                if self.gift_callback:
                    await self.gift_callback(gift_info)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _check_service_message(self, message) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ service messages –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Telegram Gifts"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º messageActionStarGift –∏ –¥—Ä—É–≥–∏–µ gift service messages
            if hasattr(message, 'service') and message.service:
                service_type = str(type(message.service).__name__)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ Star Gift (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–æ–≤)
                if 'StarGift' in service_type or 'Gift' in service_type:
                    logger.info(f"üéÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω Telegram Gift: {service_type}")
                    
                    gift_info = {
                        "id": f"gift_{message.id}_{int(datetime.now().timestamp())}",
                        "type": "Telegram Star Gift",
                        "service_type": service_type,
                        "detected_at": datetime.now().isoformat(),
                        "sender": self._get_sender_info(message),
                        "chat": self._get_chat_info(message),
                        "detection_method": "star_gift_service",
                        "message_id": message.id,
                        "is_private_message": message.chat.type.name == "PRIVATE" if hasattr(message.chat, 'type') else True
                    }
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∞—Ä–∫–µ –∏–∑ service message
                    if hasattr(message.service, 'gift'):
                        gift = message.service.gift
                        gift_info.update({
                            "gift_id": getattr(gift, 'id', None),
                            "stars": getattr(gift, 'stars', 0),
                            "convert_stars": getattr(gift, 'convert_stars', 0),
                            "first_sale_date": getattr(gift, 'first_sale_date', None),
                            "last_sale_date": getattr(gift, 'last_sale_date', None),
                            "birthday_months": getattr(gift, 'birthday_months', None),
                            "sold_out": getattr(gift, 'sold_out', False),
                            "limited": getattr(gift, 'limited', False),
                            "total_count": getattr(gift, 'total_count', 0),
                            "remaining_count": getattr(gift, 'remaining_count', 0)
                        })
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        gift_info["price"] = f"{gift_info['stars']} ‚≠ê"
                        if gift_info['limited'] and gift_info['total_count'] > 0:
                            gift_info["availability"] = f"{gift_info['remaining_count']}/{gift_info['total_count']} –æ—Å—Ç–∞–ª–æ—Å—å"
                        else:
                            gift_info["availability"] = "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è service message
                    elif hasattr(message.service, '__dict__'):
                        service_data = message.service.__dict__
                        gift_info.update({
                            "service_data": str(service_data),
                            "price": self._extract_price_from_service(service_data),
                            "quantity": self._extract_quantity_from_service(service_data)
                        })
                    
                    return gift_info
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º messageActionGiftPremium (–ø–æ–¥–∞—Ä–æ—á–Ω–∞—è Premium –ø–æ–¥–ø–∏—Å–∫–∞)
                elif 'GiftPremium' in service_type:
                    logger.info(f"üéÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–∞—Ä–æ–∫ Premium: {service_type}")
                    
                    gift_info = {
                        "id": f"premium_{message.id}_{int(datetime.now().timestamp())}",
                        "type": "Telegram Premium Gift",
                        "service_type": service_type,
                        "detected_at": datetime.now().isoformat(),
                        "sender": self._get_sender_info(message),
                        "chat": self._get_chat_info(message),
                        "detection_method": "premium_gift_service",
                        "message_id": message.id,
                        "is_private_message": message.chat.type.name == "PRIVATE" if hasattr(message.chat, 'type') else True
                    }
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ Premium –ø–æ–¥–∞—Ä–∫–µ
                    if hasattr(message.service, '__dict__'):
                        service_data = message.service.__dict__
                        gift_info.update({
                            "months": service_data.get('months', 0),
                            "currency": service_data.get('currency', 'USD'),
                            "amount": service_data.get('amount', 0),
                            "crypto_currency": service_data.get('crypto_currency', None),
                            "crypto_amount": service_data.get('crypto_amount', None)
                        })
                        
                        gift_info["price"] = f"{gift_info['amount']/100:.2f} {gift_info['currency']}"
                        gift_info["duration"] = f"{gift_info['months']} –º–µ—Å—è—Ü–µ–≤ Premium"
                    
                    return gift_info
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ service message: {e}")
        return None
    
    async def _check_gift_mentions(self, message) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        try:
            text = message.text.lower()
            
            # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            gift_patterns = [
                'telegram gift',
                'star gift', 
                '–ø–æ–¥–∞—Ä–æ–∫ –∑–≤–µ–∑–¥',
                'gift received',
                '–ø–æ–ª—É—á–µ–Ω –ø–æ–¥–∞—Ä–æ–∫'
            ]
            
            for pattern in gift_patterns:
                if pattern in text:
                    logger.info(f"üéÅ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ: {pattern}")
                    return {
                        "id": f"mention_{message.id}",
                        "type": "Gift Mention",
                        "pattern": pattern,
                        "detected_at": datetime.now().isoformat(),
                        "sender": self._get_sender_info(message),
                        "chat": self._get_chat_info(message),
                        "detection_method": "text_mention",
                        "is_private_message": message.chat.type.name == "PRIVATE" if hasattr(message.chat, 'type') else True,
                        "text_preview": text[:100] + "..." if len(text) > 100 else text
                    }
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        return None
    

    
    async def _send_gift_info_to_sender(self, original_message, gift_info):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∞—Ä–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ
            response_text = self._format_gift_response(gift_info)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if original_message.from_user:
                try:
                    await self.client.send_message(
                        chat_id=original_message.from_user.id,
                        text=response_text,
                        parse_mode="HTML"
                    )
                    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {original_message.from_user.username}")
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°, –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°, –æ—Ç–≤–µ—á–∞–µ–º –≤ —á–∞—Ç–µ: {e}")
                    await self.client.send_message(
                        chat_id=original_message.chat.id,
                        text=response_text,
                        reply_to_message_id=original_message.id,
                        parse_mode="HTML"
                    )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    def _format_gift_response(self, gift_info) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ Telegram Gift"""
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        response = f"üéÅ <b>TELEGRAM GIFT –û–ë–ù–ê–†–£–ñ–ï–ù!</b>\n\n"
        response += f"üìã <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        response += f"‚Ä¢ <b>–¢–∏–ø:</b> {gift_info.get('type', 'Unknown Gift')}\n"
        response += f"‚Ä¢ <b>ID:</b> <code>{gift_info.get('id', 'N/A')}</code>\n"
        response += f"‚Ä¢ <b>–í—Ä–µ–º—è:</b> {gift_info.get('detected_at', 'N/A')}\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        if gift_info.get('price'):
            response += f"\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>\n"
            response += f"‚Ä¢ <b>–¶–µ–Ω–∞:</b> {gift_info.get('price')}\n"
            
            if gift_info.get('availability'):
                response += f"‚Ä¢ <b>–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:</b> {gift_info.get('availability')}\n"
            
            if gift_info.get('convert_stars'):
                response += f"‚Ä¢ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:</b> {gift_info.get('convert_stars')} ‚≠ê\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        response += f"\nüë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {gift_info.get('sender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        response += f"\nüîß <b>–î–µ—Ç–∞–ª–∏:</b>\n"
        response += f"‚Ä¢ <b>–ú–µ—Ç–æ–¥:</b> {gift_info.get('detection_method', 'N/A')}\n"
        response += f"‚Ä¢ <b>Service:</b> <code>{gift_info.get('service_type', 'N/A')}</code>\n"

        response += f"\nü§ñ <i>Telegram Gift Detector v2.0</i>"
        
        return response.strip()
    
    def _get_sender_info(self, message) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ"""
        if not message.from_user:
            return "Unknown"
        
        username = f"@{message.from_user.username}" if message.from_user.username else ""
        first_name = message.from_user.first_name or ""
        last_name = message.from_user.last_name or ""
        full_name = f"{first_name} {last_name}".strip()
        
        return f"{full_name} {username}".strip() or f"ID:{message.from_user.id}"
    
    def _get_chat_info(self, message) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ"""
        if not message.chat:
            return "Unknown"
        
        if message.chat.title:
            return message.chat.title
        elif message.chat.first_name:
            return f"{message.chat.first_name} {message.chat.last_name or ''}".strip()
        else:
            return f"ID:{message.chat.id}"
    
    def _extract_price_from_service(self, service_data) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ service –¥–∞–Ω–Ω—ã—Ö"""
        service_str = str(service_data).lower()
        
        # –ü–æ–∏—Å–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ü–µ–Ω—ã
        patterns = [
            r'star_count["\s]*[:=]["\s]*(\d+)',
            r'price["\s]*[:=]["\s]*(\d+)',
            r'stars["\s]*[:=]["\s]*(\d+)',
            r'(\d+)\s*star'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, service_str)
            if match:
                return f"{match.group(1)} stars"
        
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    def _extract_quantity_from_service(self, service_data) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑ service –¥–∞–Ω–Ω—ã—Ö"""
        service_str = str(service_data).lower()
        
        # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
        patterns = [
            r'remaining["\s]*[:=]["\s]*(\d+).*total["\s]*[:=]["\s]*(\d+)',
            r'(\d+)/(\d+)',
            r'left["\s]*[:=]["\s]*(\d+)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, service_str)
            if match:
                if len(match.groups()) >= 2:
                    return f"{match.group(1)}/{match.group(2)}"
                else:
                    return f"{match.group(1)} left"
        
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    def _extract_price_from_text(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã
        patterns = [
            r'(\d+)\s*(star|–∑–≤–µ–∑–¥|stars|‚≠ê)',
            r'price[:\s]*(\d+)',
            r'—Ü–µ–Ω–∞[:\s]*(\d+)',
            r'—Å—Ç–æ–∏—Ç[:\s]*(\d+)',
            r'costs[:\s]*(\d+)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return f"{match.group(1)} stars"
        
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
_detector_instance = None

async def start_telegram_detector(api_id: str, api_hash: str, phone_number: str, gift_callback=None):
    """–ó–∞–ø—É—Å–∫ Telegram –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    global _detector_instance
    
    if _detector_instance and _detector_instance.is_running:
        raise Exception("–î–µ—Ç–µ–∫—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    
    _detector_instance = TelegramGiftDetector(api_id, api_hash, phone_number)
    await _detector_instance.start(gift_callback)

async def stop_telegram_detector():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    global _detector_instance
    
    if _detector_instance:
        await _detector_instance.stop()
        _detector_instance = None

def is_detector_running() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    global _detector_instance
    return _detector_instance is not None and _detector_instance.is_running