#!/usr/bin/env python3
"""
Telegram Gift Auto-Responder Bot v2.0
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ Telegram –ø–æ–¥–∞—Ä–∫–∏ (Star Gifts) —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π

–†–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ Telegram Gifts –∏–∑ Bot API 8.1+
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Gifts-Buyer
"""

import asyncio
import logging
import json
import time
from datetime import datetime
from typing import Dict, Any, Optional, Set, List

from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import RPCError
from pyrogram.raw import functions, types

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from gift_responder_config import *
except ImportError:
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª gift_responder_config.py!")
    print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ gift_responder_config.py")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL.upper()),
    format=LOG_FORMAT,
    handlers=[
        logging.FileHandler(LOG_FILENAME),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TelegramGiftResponder:
    def __init__(self, api_id: int = None, api_hash: str = None, phone_number: str = None, session_name: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot'–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ Telegram –ø–æ–¥–∞—Ä–∫–∏
        
        Args:
            api_id: API ID –∏–∑ my.telegram.org (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
            api_hash: API Hash –∏–∑ my.telegram.org (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
            phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
            session_name: –ò–º—è —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —è–≤–Ω–æ
        self.api_id = api_id or API_ID
        self.api_hash = api_hash or API_HASH
        self.phone_number = phone_number or PHONE_NUMBER
        self.session_name = session_name or SESSION_NAME
        
        self.client = Client(
            name=self.session_name,
            api_id=self.api_id,
            api_hash=self.api_hash,
            phone_number=self.phone_number
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "received_gifts": 0,
            "sent_responses": 0,
            "errors": 0,
            "ignored_users": 0,
            "ignored_chats": 0,
            "star_gifts": 0,
            "unique_gifts": 0,
            "regular_gifts": 0,
            "start_time": datetime.now()
        }
        
        # –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
        self.last_response_times: Dict[int, float] = {}
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.processed_messages: Set[int] = set()
        
        # –ö—ç—à –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
        self.available_gifts_cache: Dict[int, Dict] = {}
        self.cache_update_time = 0
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.client.on_message(filters.private & filters.incoming)
        async def handle_private_message(client: Client, message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            await self.process_message(message)
        
        @self.client.on_message(filters.group & filters.incoming)
        async def handle_group_message(client: Client, message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            await self.process_message(message)
    
    async def process_message(self, message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message.id in self.processed_messages:
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            self.processed_messages.add(message.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç—ã
            if await self.should_ignore_message(message):
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–º
            if await self.is_gift_message(message):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
                if not await self.check_antispam(message):
                    return
                
                gift_info = await self.extract_gift_info(message)
                await self.send_gift_response(message, gift_info)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
                await asyncio.sleep(MESSAGE_PROCESSING_DELAY)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.stats["errors"] += 1
    
    async def should_ignore_message(self, message: Message) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if message.from_user and message.from_user.id in IGNORED_USER_IDS:
            self.stats["ignored_users"] += 1
            logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç —á–∞—Ç–æ–≤
        if message.chat.id in IGNORED_CHAT_IDS:
            self.stats["ignored_chats"] += 1
            logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á–∞—Ç {message.chat.id}")
            return True
        
        return False
    
    async def check_antispam(self, message: Message) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–Ω—Ç–∏—Å–ø–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
        """
        if not message.from_user:
            return True
        
        user_id = message.from_user.id
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if user_id in self.last_response_times:
            time_diff = current_time - self.last_response_times[user_id]
            if time_diff < MIN_RESPONSE_INTERVAL:
                logger.debug(f"–ê–Ω—Ç–∏—Å–ø–∞–º: —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        self.last_response_times[user_id] = current_time
        return True
    
    async def is_gift_message(self, message: Message) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–º
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–∞—Ä–æ–∫
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–¥–∞—Ä–∫–∞
        gift_indicators = [
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ service message —Å –ø–æ–¥–∞—Ä–∫–æ–º
            self._check_service_message_gift(message),
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
            message.entities and any(
                str(entity.type).lower() in ["gift", "star_gift"] for entity in message.entities
            ),
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            message.text and any(
                keyword.lower() in message.text.lower() 
                for keyword in GIFT_KEYWORDS
            ),
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ caption –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            message.caption and any(
                keyword.lower() in message.caption.lower() 
                for keyword in GIFT_KEYWORDS
            ),
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏
            message.sticker and any(
                keyword.lower() in (message.sticker.file_name or "").lower()
                for keyword in GIFT_STICKER_KEYWORDS
            ),
        ]
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if ENABLE_EXTENDED_DETECTION:
            extended_indicators = [
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ emoji –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ
                message.text and any(emoji in message.text for emoji in ["üéÅ", "üéâ", "üéä", "üíù", "üéÄ"]),
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–∞ —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ (–≤–æ–∑–º–æ–∂–Ω–∞—è —Ü–µ–Ω–∞)
                message.text and any(
                    char.isdigit() and "‚≠ê" in message.text 
                    for char in message.text
                ),
            ]
            gift_indicators.extend(extended_indicators)
        
        return any(gift_indicators)
    
    def _check_service_message_gift(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ service message —Å –ø–æ–¥–∞—Ä–∫–æ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã service messages —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏
        service_gift_types = [
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ service message —Ç–∏–ø—ã
            "gift", "star_gift", "gift_info", "unique_gift",
            # –í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ pyrogram
            "gift_received", "gift_sent"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º service message
        if hasattr(message, 'service'):
            service_type = str(message.service).lower() if message.service else ""
            return any(gift_type in service_type for gift_type in service_gift_types)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        for attr in ['gift', 'star_gift', 'gift_info']:
            if hasattr(message, attr) and getattr(message, attr):
                return True
        
        return False
    
    async def extract_gift_info(self, message: Message) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–∞—Ä–∫–æ–º
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–∞—Ä–∫–µ
        """
        gift_info = {
            "message_id": message.id,
            "sender_id": message.from_user.id if message.from_user else None,
            "sender_username": message.from_user.username if message.from_user else None,
            "sender_first_name": message.from_user.first_name if message.from_user else None,
            "sender_last_name": message.from_user.last_name if message.from_user else None,
            "chat_id": message.chat.id,
            "chat_type": message.chat.type.value if message.chat.type else None,
            "chat_title": message.chat.title if hasattr(message.chat, 'title') else None,
            "date": message.date.isoformat() if message.date else None,
            "text": message.text,
            "caption": message.caption,
            "gift_type": "unknown",
            "gift_details": {},
            "raw_message_data": {}
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        await self._extract_gift_details_from_message(message, gift_info)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ raw API
        await self._extract_gift_details_raw(message, gift_info)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º entities
        if message.entities:
            gift_info["entities"] = []
            for entity in message.entities:
                gift_info["entities"].append({
                    "type": entity.type.value if hasattr(entity.type, 'value') else str(entity.type),
                    "offset": entity.offset,
                    "length": entity.length,
                    "url": getattr(entity, 'url', None),
                    "user": getattr(entity, 'user', None)
                })
        
        return gift_info
    
    async def _extract_gift_details_from_message(self, message: Message, gift_info: Dict[str, Any]):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ–¥–∞—Ä–∫–∞
        gift_attributes = ['gift', 'star_gift', 'gift_info', 'service']
        
        for attr in gift_attributes:
            if hasattr(message, attr):
                gift_data = getattr(message, attr)
                if gift_data:
                    gift_info["gift_type"] = f"telegram_{attr}"
                    gift_info["gift_details"] = await self._parse_gift_object(gift_data)
                    break
    
    async def _extract_gift_details_raw(self, message: Message, gift_info: Dict[str, Any]):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–∞—Ä–∫–∞ —á–µ—Ä–µ–∑ raw API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º raw —Å–æ–æ–±—â–µ–Ω–∏–µ
            raw_message = await self.client.invoke(
                functions.messages.GetMessages(
                    id=[types.InputMessageID(id=message.id)]
                )
            )
            
            if raw_message and raw_message.messages:
                raw_msg = raw_message.messages[0]
                gift_info["raw_message_data"] = self._serialize_raw_object(raw_msg)
                
                # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ –≤ raw –¥–∞–Ω–Ω—ã—Ö
                await self._parse_raw_gift_data(raw_msg, gift_info)
                
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å raw –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _parse_gift_object(self, gift_obj) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç –æ–±—ä–µ–∫—Ç –ø–æ–¥–∞—Ä–∫–∞"""
        try:
            gift_details = {}
            
            # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–æ–¥–∞—Ä–∫–∞
            gift_attrs = [
                'id', 'stars', 'price', 'currency', 'total_amount', 'remaining_amount',
                'is_limited', 'is_sold_out', 'upgrade_price', 'sticker', 'title',
                'is_unique', 'convert_stars', 'model', 'symbol', 'backdrop'
            ]
            
            for attr in gift_attrs:
                if hasattr(gift_obj, attr):
                    value = getattr(gift_obj, attr)
                    if value is not None:
                        gift_details[attr] = value
            
            return gift_details
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–¥–∞—Ä–∫–∞: {e}")
            return {"error": str(e)}
    
    async def _parse_raw_gift_data(self, raw_msg, gift_info: Dict[str, Any]):
        """–ü–∞—Ä—Å–∏—Ç raw –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∞—Ä–∫–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º action –≤ service message
            if hasattr(raw_msg, 'action'):
                action = raw_msg.action
                action_type = type(action).__name__
                
                if 'gift' in action_type.lower() or 'star' in action_type.lower():
                    gift_info["gift_type"] = f"service_{action_type.lower()}"
                    gift_info["gift_details"] = self._serialize_raw_object(action)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –ø–æ–¥–∞—Ä–∫–æ–≤
                    if 'star' in action_type.lower():
                        self.stats["star_gifts"] += 1
                    elif 'unique' in action_type.lower():
                        self.stats["unique_gifts"] += 1
                    else:
                        self.stats["regular_gifts"] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º media
            if hasattr(raw_msg, 'media'):
                media = raw_msg.media
                media_type = type(media).__name__
                
                if 'gift' in media_type.lower():
                    gift_info["gift_type"] = f"media_{media_type.lower()}"
                    gift_info["gift_details"].update(self._serialize_raw_object(media))
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ raw –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞: {e}")
    
    def _serialize_raw_object(self, obj) -> Dict[str, Any]:
        """–°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç raw –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å"""
        try:
            if hasattr(obj, '__dict__'):
                result = {}
                for key, value in obj.__dict__.items():
                    if not key.startswith('_'):
                        if hasattr(value, '__dict__'):
                            result[key] = self._serialize_raw_object(value)
                        elif isinstance(value, (list, tuple)):
                            result[key] = [
                                self._serialize_raw_object(item) if hasattr(item, '__dict__') else item
                                for item in value
                            ]
                        else:
                            result[key] = value
                return result
            else:
                return str(obj)
        except:
            return str(obj)
    
    async def get_available_gifts(self) -> Dict[int, Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ —á–µ—Ä–µ–∑ API"""
        try:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (current_time - self.cache_update_time) < self.cache_ttl and self.available_gifts_cache:
                return self.available_gifts_cache
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ —á–µ—Ä–µ–∑ raw API
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
                gifts_response = await self.client.invoke(
                    functions.payments.GetStarGifts()
                )
                
                gifts_dict = {}
                if hasattr(gifts_response, 'gifts'):
                    for gift in gifts_response.gifts:
                        gift_data = self._serialize_raw_object(gift)
                        if 'id' in gift_data:
                            gifts_dict[gift_data['id']] = gift_data
                
                self.available_gifts_cache = gifts_dict
                self.cache_update_time = current_time
                
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à –ø–æ–¥–∞—Ä–∫–æ–≤: {len(gifts_dict)} –ø–æ–¥–∞—Ä–∫–æ–≤")
                return gifts_dict
                
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ —á–µ—Ä–µ–∑ payments.GetStarGifts: {e}")
                return {}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
            return {}
    
    async def send_gift_response(self, original_message: Message, gift_info: Dict[str, Any]):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–∞—Ä–∫–µ
        
        Args:
            original_message: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–∞—Ä–∫–æ–º
            gift_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_text = await self.format_gift_response(gift_info)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        success = False
        for attempt in range(MAX_RETRY_ATTEMPTS):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                parse_mode = "HTML" if USE_HTML_FORMATTING else None
                
                await self.client.send_message(
                    chat_id=original_message.chat.id,
                    text=response_text,
                    reply_to_message_id=original_message.id,
                    parse_mode=parse_mode
                )
                
                success = True
                break
                
            except RPCError as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRY_ATTEMPTS} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < MAX_RETRY_ATTEMPTS - 1:
                    await asyncio.sleep(RETRY_DELAY)
                else:
                    logger.error(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã: {e}")
                    self.stats["errors"] += 1
                    
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
                self.stats["errors"] += 1
                break
        
        if success:
            self.stats["sent_responses"] += 1
            self.stats["received_gifts"] += 1
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç {gift_info.get('sender_username', gift_info.get('sender_id'))}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ
            if SAVE_GIFT_LOGS:
                await self.save_gift_log(gift_info)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
            if ENABLE_NOTIFICATION_CHAT and NOTIFICATION_CHAT_ID:
                await self.send_notification_to_chat(gift_info)
    
    async def format_gift_response(self, gift_info: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–∞—Ä–∫–µ
        
        Args:
            gift_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        """
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        response_parts = [
            "üéÅ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram –ø–æ–¥–∞—Ä–∫–µ:</b>\n",
            f"üì® <b>ID —Å–æ–æ–±—â–µ–Ω–∏—è:</b> <code>{gift_info['message_id']}</code>",
        ]
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        if gift_info.get('sender_id'):
            sender_info = f"üë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> "
            if gift_info.get('sender_username'):
                sender_info += f"@{gift_info['sender_username']} "
            if gift_info.get('sender_first_name'):
                sender_info += f"({gift_info['sender_first_name']}"
                if gift_info.get('sender_last_name'):
                    sender_info += f" {gift_info['sender_last_name']}"
                sender_info += ")"
            sender_info += f"\nüÜî <b>ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:</b> <code>{gift_info['sender_id']}</code>"
            response_parts.append(sender_info)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
        response_parts.append(f"üí¨ <b>ID —á–∞—Ç–∞:</b> <code>{gift_info['chat_id']}</code>")
        if gift_info.get('chat_title'):
            response_parts.append(f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:</b> {gift_info['chat_title']}")
        response_parts.append(f"üìÇ <b>–¢–∏–ø —á–∞—Ç–∞:</b> {gift_info.get('chat_type', 'unknown')}")
        
        # –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è
        if gift_info.get('date'):
            response_parts.append(f"üïê <b>–í—Ä–µ–º—è:</b> {gift_info['date']}")
        
        # –¢–∏–ø –ø–æ–¥–∞—Ä–∫–∞
        response_parts.append(f"üéØ <b>–¢–∏–ø –ø–æ–¥–∞—Ä–∫–∞:</b> {gift_info.get('gift_type', 'unknown')}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ–¥–∞—Ä–∫–∞
        gift_details = gift_info.get('gift_details', {})
        if gift_details and not gift_details.get('error'):
            response_parts.append("\nüîç <b>–î–µ—Ç–∞–ª–∏ –ø–æ–¥–∞—Ä–∫–∞:</b>")
            
            # ID –ø–æ–¥–∞—Ä–∫–∞
            if gift_details.get('id'):
                response_parts.append(f"üÜî ID –ø–æ–¥–∞—Ä–∫–∞: <code>{gift_details['id']}</code>")
            
            # –¶–µ–Ω–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö
            if gift_details.get('stars'):
                response_parts.append(f"‚≠ê –¶–µ–Ω–∞: {gift_details['stars']} –∑–≤–µ–∑–¥")
            elif gift_details.get('price'):
                response_parts.append(f"üí∞ –¶–µ–Ω–∞: {gift_details['price']} ‚≠ê")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if gift_details.get('total_amount'):
                response_parts.append(f"üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {gift_details['total_amount']}")
            if gift_details.get('remaining_amount'):
                response_parts.append(f"üì¶ –û—Å—Ç–∞–ª–æ—Å—å: {gift_details['remaining_amount']}")
            
            # –°—Ç–∞—Ç—É—Å
            if gift_details.get('is_limited') is not None:
                response_parts.append(f"üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π: {'–î–∞' if gift_details['is_limited'] else '–ù–µ—Ç'}")
            if gift_details.get('is_sold_out') is not None:
                response_parts.append(f"‚ùå –†–∞—Å–ø—Ä–æ–¥–∞–Ω: {'–î–∞' if gift_details['is_sold_out'] else '–ù–µ—Ç'}")
            if gift_details.get('is_unique') is not None:
                response_parts.append(f"üíé –£–Ω–∏–∫–∞–ª—å–Ω—ã–π: {'–î–∞' if gift_details['is_unique'] else '–ù–µ—Ç'}")
            
            # –£–ª—É—á—à–µ–Ω–∏–µ
            if gift_details.get('upgrade_price'):
                response_parts.append(f"‚¨ÜÔ∏è –¶–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è: {gift_details['upgrade_price']} ‚≠ê")
            if gift_details.get('convert_stars'):
                response_parts.append(f"üí´ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∑–≤–µ–∑–¥—ã: {gift_details['convert_stars']} ‚≠ê")
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            if gift_details.get('title'):
                response_parts.append(f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {gift_details['title']}")
        
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if gift_info.get('text'):
            text_preview = gift_info['text'][:MAX_TEXT_PREVIEW_LENGTH]
            if len(gift_info['text']) > MAX_TEXT_PREVIEW_LENGTH:
                text_preview += "..."
            response_parts.append(f"\nüí¨ <b>–¢–µ–∫—Å—Ç:</b> {text_preview}")
        
        # Entities (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if gift_info.get('entities'):
            entities_info = []
            for entity in gift_info['entities'][:MAX_ENTITIES_TO_SHOW]:
                entities_info.append(f"‚Ä¢ {entity['type']}")
            if entities_info:
                response_parts.append(f"\nüè∑ <b>–°—É—â–Ω–æ—Å—Ç–∏:</b> {', '.join(entities_info)}")
        
        response_parts.append(f"\nü§ñ <i>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç Telegram Gift Responder Bot v2.0</i>")
        
        return "\n".join(response_parts)
    
    async def send_notification_to_chat(self, gift_info: Dict[str, Any]):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∞—Ä–∫–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç
        
        Args:
            gift_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ
        """
        try:
            notification_text = f"üîî <b>–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π Telegram –ø–æ–¥–∞—Ä–æ–∫!</b>\n\n"
            notification_text += f"üë§ –û—Ç: {gift_info.get('sender_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            notification_text += f"üÜî ID: <code>{gift_info.get('sender_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</code>\n"
            notification_text += f"üí¨ –ß–∞—Ç: <code>{gift_info.get('chat_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</code>\n"
            notification_text += f"üéØ –¢–∏–ø: {gift_info.get('gift_type', 'unknown')}\n"
            notification_text += f"üïê –í—Ä–µ–º—è: {gift_info.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–∞—Ä–∫–∞
            gift_details = gift_info.get('gift_details', {})
            if gift_details.get('stars'):
                notification_text += f"‚≠ê –¶–µ–Ω–∞: {gift_details['stars']} –∑–≤–µ–∑–¥\n"
            if gift_details.get('is_unique'):
                notification_text += f"üíé –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫!\n"
            
            await self.client.send_message(
                chat_id=NOTIFICATION_CHAT_ID,
                text=notification_text,
                parse_mode="HTML" if USE_HTML_FORMATTING else None
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def save_gift_log(self, gift_info: Dict[str, Any]):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª
        
        Args:
            gift_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ
        """
        try:
            log_entry = {
                "timestamp": datetime.now().isoformat(),
                "gift_info": gift_info
            }
            
            with open(GIFT_LOG_FILENAME, "a", encoding="utf-8") as f:
                f.write(json.dumps(log_entry, ensure_ascii=False, default=str) + "\n")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
    
    async def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        uptime = datetime.now() - self.stats["start_time"]
        return {
            **self.stats,
            "uptime": str(uptime),
            "uptime_seconds": uptime.total_seconds()
        }
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ userbot'–∞"""
        try:
            await self.client.start()
            me = await self.client.get_me()
            logger.info(f"‚úÖ Userbot –∑–∞–ø—É—â–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{me.username} ({me.first_name})")
            logger.info("üéÅ –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö Telegram –ø–æ–¥–∞—Ä–∫–æ–≤...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
            available_gifts = await self.get_available_gifts()
            logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(available_gifts)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            asyncio.create_task(self.stats_reporter())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            raise
    
    async def stats_reporter(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        while True:
            await asyncio.sleep(STATS_REPORT_INTERVAL)
            stats = await self.get_stats()
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø–æ–¥–∞—Ä–∫–æ–≤: {stats['received_gifts']}, "
                       f"–æ—Ç–≤–µ—Ç–æ–≤: {stats['sent_responses']}, "
                       f"–æ—à–∏–±–æ–∫: {stats['errors']}, "
                       f"–∑–≤–µ–∑–¥–Ω—ã—Ö: {stats['star_gifts']}, "
                       f"—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {stats['unique_gifts']}, "
                       f"–æ–±—ã—á–Ω—ã—Ö: {stats['regular_gifts']}, "
                       f"–∏–≥–Ω–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['ignored_users']}, "
                       f"–∏–≥–Ω–æ—Ä —á–∞—Ç–æ–≤: {stats['ignored_chats']}, "
                       f"–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['uptime']}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if ENABLE_TERMINAL_TITLE_STATS:
                try:
                    import os
                    title = f"Gift Responder v2 - –ü–æ–¥–∞—Ä–∫–æ–≤: {stats['received_gifts']} | –û—Ç–≤–µ—Ç–æ–≤: {stats['sent_responses']}"
                    os.system(f'title {title}' if os.name == 'nt' else f'echo -ne "\\033]0;{title}\\007"')
                except:
                    pass
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ userbot'–∞"""
        try:
            await self.client.stop()
            logger.info("üõë Userbot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not validate_config():
        logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è!")
        return
    
    logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = TelegramGiftResponder()
    
    try:
        await bot.start()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await bot.get_stats()
        logger.info(f"üöÄ Telegram Gift Responder v2.0 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        logger.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        logger.info(f"  ‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(GIFT_KEYWORDS)} —Å–ª–æ–≤")
        logger.info(f"  ‚Ä¢ –ê–Ω—Ç–∏—Å–ø–∞–º –∏–Ω—Ç–µ—Ä–≤–∞–ª: {MIN_RESPONSE_INTERVAL} —Å–µ–∫")
        logger.info(f"  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤: {'–î–∞' if SAVE_GIFT_LOGS else '–ù–µ—Ç'}")
        logger.info(f"  ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è: {'–î–∞' if ENABLE_EXTENDED_DETECTION else '–ù–µ—Ç'}")
        logger.info(f"  ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç: {'–î–∞' if ENABLE_NOTIFICATION_CHAT else '–ù–µ—Ç'}")
        logger.info(f"üéÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: Star Gifts, Unique Gifts, Regular Gifts")
        
        # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        await asyncio.Event().wait()
        
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.stop()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")